// Generated by the protocol buffer compiler.  DO NOT EDIT!

package bites.vision;

public final class Vision {
  private Vision() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registry.add(bites.vision.Vision.Line.fieldX2);
    registry.add(bites.vision.Vision.Line.fieldY2);
    registry.add(bites.vision.Vision.Corner.cornerType);
    registry.add(bites.vision.Vision.Corner.cornerLines);
  }
  public static final class Image extends
      com.google.protobuf.GeneratedMessage {
    // Use Image.newBuilder() to construct.
    private Image() {}
    
    private static final Image defaultInstance = new Image();
    public static Image getDefaultInstance() {
      return defaultInstance;
    }
    
    public Image getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bites.vision.Vision.internal_static_bites_vision_Image_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bites.vision.Vision.internal_static_bites_vision_Image_fieldAccessorTable;
    }
    
    public static enum Encoding {
      YCbCr(0, 1),
      YUV422(1, 2),
      RGB(2, 3),
      BMP(3, 4),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static Encoding valueOf(int value) {
        switch (value) {
          case 1: return YCbCr;
          case 2: return YUV422;
          case 3: return RGB;
          case 4: return BMP;
          default: return null;
        }
      }
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return bites.vision.Vision.Image.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final Encoding[] VALUES = {
        YCbCr, YUV422, RGB, BMP, 
      };
      public static Encoding valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private Encoding(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        bites.vision.Vision.getDescriptor();
      }
    }
    
    // required .bites.vision.Image.Encoding encoding = 1 [default = YUV422];
    private boolean hasEncoding;
    private bites.vision.Vision.Image.Encoding encoding_ = bites.vision.Vision.Image.Encoding.YUV422;
    public boolean hasEncoding() { return hasEncoding; }
    public bites.vision.Vision.Image.Encoding getEncoding() { return encoding_; }
    
    // required int32 width = 2;
    private boolean hasWidth;
    private int width_ = 0;
    public boolean hasWidth() { return hasWidth; }
    public int getWidth() { return width_; }
    
    // required int32 height = 3;
    private boolean hasHeight;
    private int height_ = 0;
    public boolean hasHeight() { return hasHeight; }
    public int getHeight() { return height_; }
    
    // required bytes data = 4;
    private boolean hasData;
    private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasData() { return hasData; }
    public com.google.protobuf.ByteString getData() { return data_; }
    
    public static bites.vision.Vision.Image parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Image parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Image parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Image parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Image parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Image parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Image parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Image parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(bites.vision.Vision.Image prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using bites.vision.Vision.Image.newBuilder()
      private Builder() {}
      
      bites.vision.Vision.Image result = new bites.vision.Vision.Image();
      
      @Override
      protected bites.vision.Vision.Image internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new bites.vision.Vision.Image();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bites.vision.Vision.Image.getDescriptor();
      }
      
      public bites.vision.Vision.Image getDefaultInstanceForType() {
        return bites.vision.Vision.Image.getDefaultInstance();
      }
      
      public bites.vision.Vision.Image build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private bites.vision.Vision.Image buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bites.vision.Vision.Image buildPartial() {
        bites.vision.Vision.Image returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required .bites.vision.Image.Encoding encoding = 1 [default = YUV422];
      public boolean hasEncoding() {
        return result.hasEncoding();
      }
      public bites.vision.Vision.Image.Encoding getEncoding() {
        return result.getEncoding();
      }
      public Builder setEncoding(bites.vision.Vision.Image.Encoding value) {
        result.hasEncoding = true;
        result.encoding_ = value;
        return this;
      }
      public Builder clearEncoding() {
        result.hasEncoding = false;
        result.encoding_ = bites.vision.Vision.Image.Encoding.YUV422;
        return this;
      }
      
      // required int32 width = 2;
      public boolean hasWidth() {
        return result.hasWidth();
      }
      public int getWidth() {
        return result.getWidth();
      }
      public Builder setWidth(int value) {
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder clearWidth() {
        result.hasWidth = false;
        result.width_ = 0;
        return this;
      }
      
      // required int32 height = 3;
      public boolean hasHeight() {
        return result.hasHeight();
      }
      public int getHeight() {
        return result.getHeight();
      }
      public Builder setHeight(int value) {
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder clearHeight() {
        result.hasHeight = false;
        result.height_ = 0;
        return this;
      }
      
      // required bytes data = 4;
      public boolean hasData() {
        return result.hasData();
      }
      public com.google.protobuf.ByteString getData() {
        return result.getData();
      }
      public Builder setData(com.google.protobuf.ByteString value) {
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder clearData() {
        result.hasData = false;
        result.data_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }
    }
    
    static {
      bites.vision.Vision.getDescriptor();
    }
  }
  
  public static final class Landmark extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        Landmark> {
    // Use Landmark.newBuilder() to construct.
    private Landmark() {}
    
    private static final Landmark defaultInstance = new Landmark();
    public static Landmark getDefaultInstance() {
      return defaultInstance;
    }
    
    public Landmark getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bites.vision.Vision.internal_static_bites_vision_Landmark_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bites.vision.Vision.internal_static_bites_vision_Landmark_fieldAccessorTable;
    }
    
    public static enum ID {
      L_INNER_CORNER(0, 0),
      L_OUTER_CORNER(1, 1),
      T_CORNER(2, 2),
      CENTER_CIRCLE(3, 3),
      BLUE_GOAL_T(4, 4),
      YELLOW_GOAL_T(5, 5),
      BLUE_GOAL_RIGHT_L_OR_YELLOW_GOAL_LEFT_L(6, 6),
      BLUE_GOAL_LEFT_L_OR_YELLOW_GOAL_RIGHT_L(7, 7),
      BLUE_CORNER_TOP_L_OR_YELLOW_CORNER_BOTTOM_L(8, 8),
      BLUE_CORNER_BOTTOM_L_OR_YELLOW_CORNER_TOP_L(9, 9),
      CORNER_INNER_L(10, 10),
      GOAL_BOX_INNER_L(11, 11),
      BLUE_GOAL_OUTER_L(12, 12),
      YELLOW_GOAL_OUTER_L(13, 13),
      CENTER_T(14, 14),
      BLUE_CORNER_TOP_L(15, 15),
      BLUE_CORNER_BOTTOM_L(16, 16),
      BLUE_GOAL_LEFT_T(17, 17),
      BLUE_GOAL_RIGHT_T(18, 18),
      BLUE_GOAL_LEFT_L(19, 19),
      BLUE_GOAL_RIGHT_L(20, 20),
      CENTER_BOTTOM_T(21, 21),
      CENTER_TOP_T(22, 22),
      YELLOW_CORNER_BOTTOM_L(23, 23),
      YELLOW_CORNER_TOP_L(24, 24),
      YELLOW_GOAL_LEFT_T(25, 25),
      YELLOW_GOAL_RIGHT_T(26, 26),
      YELLOW_GOAL_LEFT_L(27, 27),
      YELLOW_GOAL_RIGHT_L(28, 28),
      CORNER_NO_IDEA_ID(29, 29),
      TOP_CC(30, 30),
      BOTTOM_CC(31, 31),
      BLUE_GOAL_LEFT_POST(32, 40),
      BLUE_GOAL_RIGHT_POST(33, 41),
      YELLOW_GOAL_LEFT_POST(34, 42),
      YELLOW_GOAL_RIGHT_POST(35, 43),
      BLUE_GOAL_POST(36, 44),
      YELLOW_GOAL_POST(37, 45),
      UNKNOWN_FIELD_OBJECT(38, 46),
      UNKNOWN_LINE(39, 50),
      SIDE_OR_ENDLINE(40, 51),
      SIDELINE_LINE(41, 52),
      ENDLINE_LINE(42, 53),
      GOALBOX_LINE(43, 54),
      GOALBOX_SIDE_LINE(44, 55),
      GOALBOX_TOP_LINE(45, 56),
      BLUE_GOAL_ENDLINE(46, 57),
      YELLOW_GOAL_ENDLINE(47, 58),
      BLUE_YELLOW_SIDELINE(48, 59),
      YELLOW_BLUE_SIDELINE(49, 60),
      CENTER_FIELD_LINE(50, 61),
      BLUE_GOALBOX_TOP_LINE(51, 62),
      BLUE_GOALBOX_LEFT_LINE(52, 63),
      BLUE_GOALBOX_RIGHT_LINE(53, 64),
      YELLOW_GOALBOX_TOP_LINE(54, 65),
      YELLOW_GOALBOX_RIGHT_LINE(56, 66),
      BLUE_GOAL_CROSS(57, 80),
      YELLOW_GOAL_CROSS(58, 81),
      ABSTRACT_CROSS(59, 82),
      ;
      
      public static final ID YELLOW_GOALBOX_LEFT_LINE = YELLOW_GOALBOX_TOP_LINE;
      
      public final int getNumber() { return value; }
      
      public static ID valueOf(int value) {
        switch (value) {
          case 0: return L_INNER_CORNER;
          case 1: return L_OUTER_CORNER;
          case 2: return T_CORNER;
          case 3: return CENTER_CIRCLE;
          case 4: return BLUE_GOAL_T;
          case 5: return YELLOW_GOAL_T;
          case 6: return BLUE_GOAL_RIGHT_L_OR_YELLOW_GOAL_LEFT_L;
          case 7: return BLUE_GOAL_LEFT_L_OR_YELLOW_GOAL_RIGHT_L;
          case 8: return BLUE_CORNER_TOP_L_OR_YELLOW_CORNER_BOTTOM_L;
          case 9: return BLUE_CORNER_BOTTOM_L_OR_YELLOW_CORNER_TOP_L;
          case 10: return CORNER_INNER_L;
          case 11: return GOAL_BOX_INNER_L;
          case 12: return BLUE_GOAL_OUTER_L;
          case 13: return YELLOW_GOAL_OUTER_L;
          case 14: return CENTER_T;
          case 15: return BLUE_CORNER_TOP_L;
          case 16: return BLUE_CORNER_BOTTOM_L;
          case 17: return BLUE_GOAL_LEFT_T;
          case 18: return BLUE_GOAL_RIGHT_T;
          case 19: return BLUE_GOAL_LEFT_L;
          case 20: return BLUE_GOAL_RIGHT_L;
          case 21: return CENTER_BOTTOM_T;
          case 22: return CENTER_TOP_T;
          case 23: return YELLOW_CORNER_BOTTOM_L;
          case 24: return YELLOW_CORNER_TOP_L;
          case 25: return YELLOW_GOAL_LEFT_T;
          case 26: return YELLOW_GOAL_RIGHT_T;
          case 27: return YELLOW_GOAL_LEFT_L;
          case 28: return YELLOW_GOAL_RIGHT_L;
          case 29: return CORNER_NO_IDEA_ID;
          case 30: return TOP_CC;
          case 31: return BOTTOM_CC;
          case 40: return BLUE_GOAL_LEFT_POST;
          case 41: return BLUE_GOAL_RIGHT_POST;
          case 42: return YELLOW_GOAL_LEFT_POST;
          case 43: return YELLOW_GOAL_RIGHT_POST;
          case 44: return BLUE_GOAL_POST;
          case 45: return YELLOW_GOAL_POST;
          case 46: return UNKNOWN_FIELD_OBJECT;
          case 50: return UNKNOWN_LINE;
          case 51: return SIDE_OR_ENDLINE;
          case 52: return SIDELINE_LINE;
          case 53: return ENDLINE_LINE;
          case 54: return GOALBOX_LINE;
          case 55: return GOALBOX_SIDE_LINE;
          case 56: return GOALBOX_TOP_LINE;
          case 57: return BLUE_GOAL_ENDLINE;
          case 58: return YELLOW_GOAL_ENDLINE;
          case 59: return BLUE_YELLOW_SIDELINE;
          case 60: return YELLOW_BLUE_SIDELINE;
          case 61: return CENTER_FIELD_LINE;
          case 62: return BLUE_GOALBOX_TOP_LINE;
          case 63: return BLUE_GOALBOX_LEFT_LINE;
          case 64: return BLUE_GOALBOX_RIGHT_LINE;
          case 65: return YELLOW_GOALBOX_TOP_LINE;
          case 66: return YELLOW_GOALBOX_RIGHT_LINE;
          case 80: return BLUE_GOAL_CROSS;
          case 81: return YELLOW_GOAL_CROSS;
          case 82: return ABSTRACT_CROSS;
          default: return null;
        }
      }
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return bites.vision.Vision.Landmark.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final ID[] VALUES = {
        L_INNER_CORNER, L_OUTER_CORNER, T_CORNER, CENTER_CIRCLE, BLUE_GOAL_T, YELLOW_GOAL_T, BLUE_GOAL_RIGHT_L_OR_YELLOW_GOAL_LEFT_L, BLUE_GOAL_LEFT_L_OR_YELLOW_GOAL_RIGHT_L, BLUE_CORNER_TOP_L_OR_YELLOW_CORNER_BOTTOM_L, BLUE_CORNER_BOTTOM_L_OR_YELLOW_CORNER_TOP_L, CORNER_INNER_L, GOAL_BOX_INNER_L, BLUE_GOAL_OUTER_L, YELLOW_GOAL_OUTER_L, CENTER_T, BLUE_CORNER_TOP_L, BLUE_CORNER_BOTTOM_L, BLUE_GOAL_LEFT_T, BLUE_GOAL_RIGHT_T, BLUE_GOAL_LEFT_L, BLUE_GOAL_RIGHT_L, CENTER_BOTTOM_T, CENTER_TOP_T, YELLOW_CORNER_BOTTOM_L, YELLOW_CORNER_TOP_L, YELLOW_GOAL_LEFT_T, YELLOW_GOAL_RIGHT_T, YELLOW_GOAL_LEFT_L, YELLOW_GOAL_RIGHT_L, CORNER_NO_IDEA_ID, TOP_CC, BOTTOM_CC, BLUE_GOAL_LEFT_POST, BLUE_GOAL_RIGHT_POST, YELLOW_GOAL_LEFT_POST, YELLOW_GOAL_RIGHT_POST, BLUE_GOAL_POST, YELLOW_GOAL_POST, UNKNOWN_FIELD_OBJECT, UNKNOWN_LINE, SIDE_OR_ENDLINE, SIDELINE_LINE, ENDLINE_LINE, GOALBOX_LINE, GOALBOX_SIDE_LINE, GOALBOX_TOP_LINE, BLUE_GOAL_ENDLINE, YELLOW_GOAL_ENDLINE, BLUE_YELLOW_SIDELINE, YELLOW_BLUE_SIDELINE, CENTER_FIELD_LINE, BLUE_GOALBOX_TOP_LINE, BLUE_GOALBOX_LEFT_LINE, BLUE_GOALBOX_RIGHT_LINE, YELLOW_GOALBOX_TOP_LINE, YELLOW_GOALBOX_LEFT_LINE, YELLOW_GOALBOX_RIGHT_LINE, BLUE_GOAL_CROSS, YELLOW_GOAL_CROSS, ABSTRACT_CROSS, 
      };
      public static ID valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private ID(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        bites.vision.Vision.getDescriptor();
      }
    }
    
    public static enum IDCertainty {
      NOT_SURE(0, 0),
      MILDY_SURE(1, 1),
      _SURE(2, 2),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static IDCertainty valueOf(int value) {
        switch (value) {
          case 0: return NOT_SURE;
          case 1: return MILDY_SURE;
          case 2: return _SURE;
          default: return null;
        }
      }
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return bites.vision.Vision.Landmark.getDescriptor().getEnumTypes().get(1);
      }
      
      private static final IDCertainty[] VALUES = {
        NOT_SURE, MILDY_SURE, _SURE, 
      };
      public static IDCertainty valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private IDCertainty(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        bites.vision.Vision.getDescriptor();
      }
    }
    
    public static enum DistanceCertainty {
      BOTH_UNSURE(0, 0),
      WIDTH_UNSURE(1, 1),
      HEIGHT_UNSURE(2, 2),
      BOTH_SURE(3, 3),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static DistanceCertainty valueOf(int value) {
        switch (value) {
          case 0: return BOTH_UNSURE;
          case 1: return WIDTH_UNSURE;
          case 2: return HEIGHT_UNSURE;
          case 3: return BOTH_SURE;
          default: return null;
        }
      }
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return bites.vision.Vision.Landmark.getDescriptor().getEnumTypes().get(2);
      }
      
      private static final DistanceCertainty[] VALUES = {
        BOTH_UNSURE, WIDTH_UNSURE, HEIGHT_UNSURE, BOTH_SURE, 
      };
      public static DistanceCertainty valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private DistanceCertainty(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        bites.vision.Vision.getDescriptor();
      }
    }
    
    // required .bites.vision.Landmark.ID id = 1;
    private boolean hasId;
    private bites.vision.Vision.Landmark.ID id_ = bites.vision.Vision.Landmark.ID.L_INNER_CORNER;
    public boolean hasId() { return hasId; }
    public bites.vision.Vision.Landmark.ID getId() { return id_; }
    
    // required float field_x = 2;
    private boolean hasFieldX;
    private float fieldX_ = 0F;
    public boolean hasFieldX() { return hasFieldX; }
    public float getFieldX() { return fieldX_; }
    
    // required float field_y = 3;
    private boolean hasFieldY;
    private float fieldY_ = 0F;
    public boolean hasFieldY() { return hasFieldY; }
    public float getFieldY() { return fieldY_; }
    
    // optional .bites.vision.Landmark.IDCertainty id_certainty = 4;
    private boolean hasIdCertainty;
    private bites.vision.Vision.Landmark.IDCertainty idCertainty_ = bites.vision.Vision.Landmark.IDCertainty.NOT_SURE;
    public boolean hasIdCertainty() { return hasIdCertainty; }
    public bites.vision.Vision.Landmark.IDCertainty getIdCertainty() { return idCertainty_; }
    
    // optional .bites.vision.Landmark.DistanceCertainty distance_certainty = 5;
    private boolean hasDistanceCertainty;
    private bites.vision.Vision.Landmark.DistanceCertainty distanceCertainty_ = bites.vision.Vision.Landmark.DistanceCertainty.BOTH_UNSURE;
    public boolean hasDistanceCertainty() { return hasDistanceCertainty; }
    public bites.vision.Vision.Landmark.DistanceCertainty getDistanceCertainty() { return distanceCertainty_; }
    
    public static bites.vision.Vision.Landmark parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Landmark parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Landmark parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Landmark parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Landmark parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Landmark parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Landmark parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Landmark parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(bites.vision.Vision.Landmark prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          bites.vision.Vision.Landmark, Builder> {
      // Construct using bites.vision.Vision.Landmark.newBuilder()
      private Builder() {}
      
      bites.vision.Vision.Landmark result = new bites.vision.Vision.Landmark();
      
      @Override
      protected bites.vision.Vision.Landmark internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new bites.vision.Vision.Landmark();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bites.vision.Vision.Landmark.getDescriptor();
      }
      
      public bites.vision.Vision.Landmark getDefaultInstanceForType() {
        return bites.vision.Vision.Landmark.getDefaultInstance();
      }
      
      public bites.vision.Vision.Landmark build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private bites.vision.Vision.Landmark buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bites.vision.Vision.Landmark buildPartial() {
        bites.vision.Vision.Landmark returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required .bites.vision.Landmark.ID id = 1;
      public boolean hasId() {
        return result.hasId();
      }
      public bites.vision.Vision.Landmark.ID getId() {
        return result.getId();
      }
      public Builder setId(bites.vision.Vision.Landmark.ID value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder clearId() {
        result.hasId = false;
        result.id_ = bites.vision.Vision.Landmark.ID.L_INNER_CORNER;
        return this;
      }
      
      // required float field_x = 2;
      public boolean hasFieldX() {
        return result.hasFieldX();
      }
      public float getFieldX() {
        return result.getFieldX();
      }
      public Builder setFieldX(float value) {
        result.hasFieldX = true;
        result.fieldX_ = value;
        return this;
      }
      public Builder clearFieldX() {
        result.hasFieldX = false;
        result.fieldX_ = 0F;
        return this;
      }
      
      // required float field_y = 3;
      public boolean hasFieldY() {
        return result.hasFieldY();
      }
      public float getFieldY() {
        return result.getFieldY();
      }
      public Builder setFieldY(float value) {
        result.hasFieldY = true;
        result.fieldY_ = value;
        return this;
      }
      public Builder clearFieldY() {
        result.hasFieldY = false;
        result.fieldY_ = 0F;
        return this;
      }
      
      // optional .bites.vision.Landmark.IDCertainty id_certainty = 4;
      public boolean hasIdCertainty() {
        return result.hasIdCertainty();
      }
      public bites.vision.Vision.Landmark.IDCertainty getIdCertainty() {
        return result.getIdCertainty();
      }
      public Builder setIdCertainty(bites.vision.Vision.Landmark.IDCertainty value) {
        result.hasIdCertainty = true;
        result.idCertainty_ = value;
        return this;
      }
      public Builder clearIdCertainty() {
        result.hasIdCertainty = false;
        result.idCertainty_ = bites.vision.Vision.Landmark.IDCertainty.NOT_SURE;
        return this;
      }
      
      // optional .bites.vision.Landmark.DistanceCertainty distance_certainty = 5;
      public boolean hasDistanceCertainty() {
        return result.hasDistanceCertainty();
      }
      public bites.vision.Vision.Landmark.DistanceCertainty getDistanceCertainty() {
        return result.getDistanceCertainty();
      }
      public Builder setDistanceCertainty(bites.vision.Vision.Landmark.DistanceCertainty value) {
        result.hasDistanceCertainty = true;
        result.distanceCertainty_ = value;
        return this;
      }
      public Builder clearDistanceCertainty() {
        result.hasDistanceCertainty = false;
        result.distanceCertainty_ = bites.vision.Vision.Landmark.DistanceCertainty.BOTH_UNSURE;
        return this;
      }
    }
    
    static {
      bites.vision.Vision.getDescriptor();
    }
  }
  
  public static final class DistanceBearing extends
      com.google.protobuf.GeneratedMessage {
    // Use DistanceBearing.newBuilder() to construct.
    private DistanceBearing() {}
    
    private static final DistanceBearing defaultInstance = new DistanceBearing();
    public static DistanceBearing getDefaultInstance() {
      return defaultInstance;
    }
    
    public DistanceBearing getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bites.vision.Vision.internal_static_bites_vision_DistanceBearing_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bites.vision.Vision.internal_static_bites_vision_DistanceBearing_fieldAccessorTable;
    }
    
    // required float distance = 1;
    private boolean hasDistance;
    private float distance_ = 0F;
    public boolean hasDistance() { return hasDistance; }
    public float getDistance() { return distance_; }
    
    // required float bearing = 2;
    private boolean hasBearing;
    private float bearing_ = 0F;
    public boolean hasBearing() { return hasBearing; }
    public float getBearing() { return bearing_; }
    
    // required float distance_sd = 3;
    private boolean hasDistanceSd;
    private float distanceSd_ = 0F;
    public boolean hasDistanceSd() { return hasDistanceSd; }
    public float getDistanceSd() { return distanceSd_; }
    
    // required float bearing_sd = 4;
    private boolean hasBearingSd;
    private float bearingSd_ = 0F;
    public boolean hasBearingSd() { return hasBearingSd; }
    public float getBearingSd() { return bearingSd_; }
    
    public static bites.vision.Vision.DistanceBearing parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.DistanceBearing parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.DistanceBearing parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.DistanceBearing parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.DistanceBearing parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.DistanceBearing parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.DistanceBearing parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.DistanceBearing parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(bites.vision.Vision.DistanceBearing prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using bites.vision.Vision.DistanceBearing.newBuilder()
      private Builder() {}
      
      bites.vision.Vision.DistanceBearing result = new bites.vision.Vision.DistanceBearing();
      
      @Override
      protected bites.vision.Vision.DistanceBearing internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new bites.vision.Vision.DistanceBearing();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bites.vision.Vision.DistanceBearing.getDescriptor();
      }
      
      public bites.vision.Vision.DistanceBearing getDefaultInstanceForType() {
        return bites.vision.Vision.DistanceBearing.getDefaultInstance();
      }
      
      public bites.vision.Vision.DistanceBearing build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private bites.vision.Vision.DistanceBearing buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bites.vision.Vision.DistanceBearing buildPartial() {
        bites.vision.Vision.DistanceBearing returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required float distance = 1;
      public boolean hasDistance() {
        return result.hasDistance();
      }
      public float getDistance() {
        return result.getDistance();
      }
      public Builder setDistance(float value) {
        result.hasDistance = true;
        result.distance_ = value;
        return this;
      }
      public Builder clearDistance() {
        result.hasDistance = false;
        result.distance_ = 0F;
        return this;
      }
      
      // required float bearing = 2;
      public boolean hasBearing() {
        return result.hasBearing();
      }
      public float getBearing() {
        return result.getBearing();
      }
      public Builder setBearing(float value) {
        result.hasBearing = true;
        result.bearing_ = value;
        return this;
      }
      public Builder clearBearing() {
        result.hasBearing = false;
        result.bearing_ = 0F;
        return this;
      }
      
      // required float distance_sd = 3;
      public boolean hasDistanceSd() {
        return result.hasDistanceSd();
      }
      public float getDistanceSd() {
        return result.getDistanceSd();
      }
      public Builder setDistanceSd(float value) {
        result.hasDistanceSd = true;
        result.distanceSd_ = value;
        return this;
      }
      public Builder clearDistanceSd() {
        result.hasDistanceSd = false;
        result.distanceSd_ = 0F;
        return this;
      }
      
      // required float bearing_sd = 4;
      public boolean hasBearingSd() {
        return result.hasBearingSd();
      }
      public float getBearingSd() {
        return result.getBearingSd();
      }
      public Builder setBearingSd(float value) {
        result.hasBearingSd = true;
        result.bearingSd_ = value;
        return this;
      }
      public Builder clearBearingSd() {
        result.hasBearingSd = false;
        result.bearingSd_ = 0F;
        return this;
      }
    }
    
    static {
      bites.vision.Vision.getDescriptor();
    }
  }
  
  public static final class Detection extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        Detection> {
    // Use Detection.newBuilder() to construct.
    private Detection() {}
    
    private static final Detection defaultInstance = new Detection();
    public static Detection getDefaultInstance() {
      return defaultInstance;
    }
    
    public Detection getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bites.vision.Vision.internal_static_bites_vision_Detection_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bites.vision.Vision.internal_static_bites_vision_Detection_fieldAccessorTable;
    }
    
    // required int32 x = 1;
    private boolean hasX;
    private int x_ = 0;
    public boolean hasX() { return hasX; }
    public int getX() { return x_; }
    
    // required int32 y = 2;
    private boolean hasY;
    private int y_ = 0;
    public boolean hasY() { return hasY; }
    public int getY() { return y_; }
    
    // required float width = 3;
    private boolean hasWidth;
    private float width_ = 0F;
    public boolean hasWidth() { return hasWidth; }
    public float getWidth() { return width_; }
    
    // required float height = 4;
    private boolean hasHeight;
    private float height_ = 0F;
    public boolean hasHeight() { return hasHeight; }
    public float getHeight() { return height_; }
    
    // required int32 center_x = 5;
    private boolean hasCenterX;
    private int centerX_ = 0;
    public boolean hasCenterX() { return hasCenterX; }
    public int getCenterX() { return centerX_; }
    
    // required int32 center_y = 6;
    private boolean hasCenterY;
    private int centerY_ = 0;
    public boolean hasCenterY() { return hasCenterY; }
    public int getCenterY() { return centerY_; }
    
    // required float angle_x = 7;
    private boolean hasAngleX;
    private float angleX_ = 0F;
    public boolean hasAngleX() { return hasAngleX; }
    public float getAngleX() { return angleX_; }
    
    // required float angle_y = 8;
    private boolean hasAngleY;
    private float angleY_ = 0F;
    public boolean hasAngleY() { return hasAngleY; }
    public float getAngleY() { return angleY_; }
    
    // required float foc_dist = 9;
    private boolean hasFocDist;
    private float focDist_ = 0F;
    public boolean hasFocDist() { return hasFocDist; }
    public float getFocDist() { return focDist_; }
    
    // required float elevation = 10;
    private boolean hasElevation;
    private float elevation_ = 0F;
    public boolean hasElevation() { return hasElevation; }
    public float getElevation() { return elevation_; }
    
    // required .bites.vision.DistanceBearing db = 11;
    private boolean hasDb;
    private bites.vision.Vision.DistanceBearing db_ = bites.vision.Vision.DistanceBearing.getDefaultInstance();
    public boolean hasDb() { return hasDb; }
    public bites.vision.Vision.DistanceBearing getDb() { return db_; }
    
    public static bites.vision.Vision.Detection parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Detection parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Detection parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Detection parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Detection parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Detection parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Detection parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Detection parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(bites.vision.Vision.Detection prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          bites.vision.Vision.Detection, Builder> {
      // Construct using bites.vision.Vision.Detection.newBuilder()
      private Builder() {}
      
      bites.vision.Vision.Detection result = new bites.vision.Vision.Detection();
      
      @Override
      protected bites.vision.Vision.Detection internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new bites.vision.Vision.Detection();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bites.vision.Vision.Detection.getDescriptor();
      }
      
      public bites.vision.Vision.Detection getDefaultInstanceForType() {
        return bites.vision.Vision.Detection.getDefaultInstance();
      }
      
      public bites.vision.Vision.Detection build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private bites.vision.Vision.Detection buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bites.vision.Vision.Detection buildPartial() {
        bites.vision.Vision.Detection returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required int32 x = 1;
      public boolean hasX() {
        return result.hasX();
      }
      public int getX() {
        return result.getX();
      }
      public Builder setX(int value) {
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder clearX() {
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      // required int32 y = 2;
      public boolean hasY() {
        return result.hasY();
      }
      public int getY() {
        return result.getY();
      }
      public Builder setY(int value) {
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder clearY() {
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      // required float width = 3;
      public boolean hasWidth() {
        return result.hasWidth();
      }
      public float getWidth() {
        return result.getWidth();
      }
      public Builder setWidth(float value) {
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder clearWidth() {
        result.hasWidth = false;
        result.width_ = 0F;
        return this;
      }
      
      // required float height = 4;
      public boolean hasHeight() {
        return result.hasHeight();
      }
      public float getHeight() {
        return result.getHeight();
      }
      public Builder setHeight(float value) {
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder clearHeight() {
        result.hasHeight = false;
        result.height_ = 0F;
        return this;
      }
      
      // required int32 center_x = 5;
      public boolean hasCenterX() {
        return result.hasCenterX();
      }
      public int getCenterX() {
        return result.getCenterX();
      }
      public Builder setCenterX(int value) {
        result.hasCenterX = true;
        result.centerX_ = value;
        return this;
      }
      public Builder clearCenterX() {
        result.hasCenterX = false;
        result.centerX_ = 0;
        return this;
      }
      
      // required int32 center_y = 6;
      public boolean hasCenterY() {
        return result.hasCenterY();
      }
      public int getCenterY() {
        return result.getCenterY();
      }
      public Builder setCenterY(int value) {
        result.hasCenterY = true;
        result.centerY_ = value;
        return this;
      }
      public Builder clearCenterY() {
        result.hasCenterY = false;
        result.centerY_ = 0;
        return this;
      }
      
      // required float angle_x = 7;
      public boolean hasAngleX() {
        return result.hasAngleX();
      }
      public float getAngleX() {
        return result.getAngleX();
      }
      public Builder setAngleX(float value) {
        result.hasAngleX = true;
        result.angleX_ = value;
        return this;
      }
      public Builder clearAngleX() {
        result.hasAngleX = false;
        result.angleX_ = 0F;
        return this;
      }
      
      // required float angle_y = 8;
      public boolean hasAngleY() {
        return result.hasAngleY();
      }
      public float getAngleY() {
        return result.getAngleY();
      }
      public Builder setAngleY(float value) {
        result.hasAngleY = true;
        result.angleY_ = value;
        return this;
      }
      public Builder clearAngleY() {
        result.hasAngleY = false;
        result.angleY_ = 0F;
        return this;
      }
      
      // required float foc_dist = 9;
      public boolean hasFocDist() {
        return result.hasFocDist();
      }
      public float getFocDist() {
        return result.getFocDist();
      }
      public Builder setFocDist(float value) {
        result.hasFocDist = true;
        result.focDist_ = value;
        return this;
      }
      public Builder clearFocDist() {
        result.hasFocDist = false;
        result.focDist_ = 0F;
        return this;
      }
      
      // required float elevation = 10;
      public boolean hasElevation() {
        return result.hasElevation();
      }
      public float getElevation() {
        return result.getElevation();
      }
      public Builder setElevation(float value) {
        result.hasElevation = true;
        result.elevation_ = value;
        return this;
      }
      public Builder clearElevation() {
        result.hasElevation = false;
        result.elevation_ = 0F;
        return this;
      }
      
      // required .bites.vision.DistanceBearing db = 11;
      public boolean hasDb() {
        return result.hasDb();
      }
      public bites.vision.Vision.DistanceBearing getDb() {
        return result.getDb();
      }
      public Builder setDb(bites.vision.Vision.DistanceBearing value) {
        result.hasDb = true;
        result.db_ = value;
        return this;
      }
      public Builder setDb(bites.vision.Vision.DistanceBearing.Builder builderForValue) {
        result.hasDb = true;
        result.db_ = builderForValue.build();
        return this;
      }
      public Builder mergeDb(bites.vision.Vision.DistanceBearing value) {
        if (result.hasDb() &&
            result.db_ != bites.vision.Vision.DistanceBearing.getDefaultInstance()) {
          result.db_ =
            bites.vision.Vision.DistanceBearing.newBuilder(result.db_).mergeFrom(value).buildPartial();
        } else {
          result.db_ = value;
        }
        result.hasDb = true;
        return this;
      }
      public Builder clearDb() {
        result.hasDb = false;
        result.db_ = bites.vision.Vision.DistanceBearing.getDefaultInstance();
        return this;
      }
    }
    
    static {
      bites.vision.Vision.getDescriptor();
    }
  }
  
  public static final class Line extends
      com.google.protobuf.GeneratedMessage {
    // Use Line.newBuilder() to construct.
    private Line() {}
    
    private static final Line defaultInstance = new Line();
    public static Line getDefaultInstance() {
      return defaultInstance;
    }
    
    public Line getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bites.vision.Vision.internal_static_bites_vision_Line_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bites.vision.Vision.internal_static_bites_vision_Line_fieldAccessorTable;
    }
    
    public static enum ScanDirection {
      HORIZONTAL(0, 0),
      VERTICAL(1, 1),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static ScanDirection valueOf(int value) {
        switch (value) {
          case 0: return HORIZONTAL;
          case 1: return VERTICAL;
          default: return null;
        }
      }
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return bites.vision.Vision.Line.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final ScanDirection[] VALUES = {
        HORIZONTAL, VERTICAL, 
      };
      public static ScanDirection valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private ScanDirection(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        bites.vision.Vision.getDescriptor();
      }
    }
    
    public static final class LinePoint extends
        com.google.protobuf.GeneratedMessage {
      // Use LinePoint.newBuilder() to construct.
      private LinePoint() {}
      
      private static final LinePoint defaultInstance = new LinePoint();
      public static LinePoint getDefaultInstance() {
        return defaultInstance;
      }
      
      public LinePoint getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return bites.vision.Vision.internal_static_bites_vision_Line_LinePoint_descriptor;
      }
      
      @Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return bites.vision.Vision.internal_static_bites_vision_Line_LinePoint_fieldAccessorTable;
      }
      
      // required int32 x = 1;
      private boolean hasX;
      private int x_ = 0;
      public boolean hasX() { return hasX; }
      public int getX() { return x_; }
      
      // required int32 y = 2;
      private boolean hasY;
      private int y_ = 0;
      public boolean hasY() { return hasY; }
      public int getY() { return y_; }
      
      // required float line_width = 3;
      private boolean hasLineWidth;
      private float lineWidth_ = 0F;
      public boolean hasLineWidth() { return hasLineWidth; }
      public float getLineWidth() { return lineWidth_; }
      
      // required float distance = 4;
      private boolean hasDistance;
      private float distance_ = 0F;
      public boolean hasDistance() { return hasDistance; }
      public float getDistance() { return distance_; }
      
      // required .bites.vision.Line.ScanDirection found_with_scan = 5;
      private boolean hasFoundWithScan;
      private bites.vision.Vision.Line.ScanDirection foundWithScan_ = bites.vision.Vision.Line.ScanDirection.HORIZONTAL;
      public boolean hasFoundWithScan() { return hasFoundWithScan; }
      public bites.vision.Vision.Line.ScanDirection getFoundWithScan() { return foundWithScan_; }
      
      public static bites.vision.Vision.Line.LinePoint parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static bites.vision.Vision.Line.LinePoint parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistry extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static bites.vision.Vision.Line.LinePoint parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static bites.vision.Vision.Line.LinePoint parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistry extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static bites.vision.Vision.Line.LinePoint parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static bites.vision.Vision.Line.LinePoint parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistry extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static bites.vision.Vision.Line.LinePoint parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static bites.vision.Vision.Line.LinePoint parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistry extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return new Builder(); }
      public Builder newBuilderForType() { return new Builder(); }
      public static Builder newBuilder(bites.vision.Vision.Line.LinePoint prototype) {
        return new Builder().mergeFrom(prototype);
      }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        // Construct using bites.vision.Vision.Line.LinePoint.newBuilder()
        private Builder() {}
        
        bites.vision.Vision.Line.LinePoint result = new bites.vision.Vision.Line.LinePoint();
        
        @Override
        protected bites.vision.Vision.Line.LinePoint internalGetResult() {
          return result;
        }
        
        @Override
        public Builder clear() {
          result = new bites.vision.Vision.Line.LinePoint();
          return this;
        }
        
        @Override
        public Builder clone() {
          return new Builder().mergeFrom(result);
        }
        
        @Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return bites.vision.Vision.Line.LinePoint.getDescriptor();
        }
        
        public bites.vision.Vision.Line.LinePoint getDefaultInstanceForType() {
          return bites.vision.Vision.Line.LinePoint.getDefaultInstance();
        }
        
        public bites.vision.Vision.Line.LinePoint build() {
          if (!isInitialized()) {
            throw new com.google.protobuf.UninitializedMessageException(
              result);
          }
          return buildPartial();
        }
        
        private bites.vision.Vision.Line.LinePoint buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw new com.google.protobuf.UninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public bites.vision.Vision.Line.LinePoint buildPartial() {
          bites.vision.Vision.Line.LinePoint returnMe = result;
          result = null;
          return returnMe;
        }
        
        
        // required int32 x = 1;
        public boolean hasX() {
          return result.hasX();
        }
        public int getX() {
          return result.getX();
        }
        public Builder setX(int value) {
          result.hasX = true;
          result.x_ = value;
          return this;
        }
        public Builder clearX() {
          result.hasX = false;
          result.x_ = 0;
          return this;
        }
        
        // required int32 y = 2;
        public boolean hasY() {
          return result.hasY();
        }
        public int getY() {
          return result.getY();
        }
        public Builder setY(int value) {
          result.hasY = true;
          result.y_ = value;
          return this;
        }
        public Builder clearY() {
          result.hasY = false;
          result.y_ = 0;
          return this;
        }
        
        // required float line_width = 3;
        public boolean hasLineWidth() {
          return result.hasLineWidth();
        }
        public float getLineWidth() {
          return result.getLineWidth();
        }
        public Builder setLineWidth(float value) {
          result.hasLineWidth = true;
          result.lineWidth_ = value;
          return this;
        }
        public Builder clearLineWidth() {
          result.hasLineWidth = false;
          result.lineWidth_ = 0F;
          return this;
        }
        
        // required float distance = 4;
        public boolean hasDistance() {
          return result.hasDistance();
        }
        public float getDistance() {
          return result.getDistance();
        }
        public Builder setDistance(float value) {
          result.hasDistance = true;
          result.distance_ = value;
          return this;
        }
        public Builder clearDistance() {
          result.hasDistance = false;
          result.distance_ = 0F;
          return this;
        }
        
        // required .bites.vision.Line.ScanDirection found_with_scan = 5;
        public boolean hasFoundWithScan() {
          return result.hasFoundWithScan();
        }
        public bites.vision.Vision.Line.ScanDirection getFoundWithScan() {
          return result.getFoundWithScan();
        }
        public Builder setFoundWithScan(bites.vision.Vision.Line.ScanDirection value) {
          result.hasFoundWithScan = true;
          result.foundWithScan_ = value;
          return this;
        }
        public Builder clearFoundWithScan() {
          result.hasFoundWithScan = false;
          result.foundWithScan_ = bites.vision.Vision.Line.ScanDirection.HORIZONTAL;
          return this;
        }
      }
      
      static {
        bites.vision.Vision.getDescriptor();
      }
    }
    
    public static
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        bites.vision.Vision.Landmark,
        java.lang.Float> fieldX2;
    public static
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        bites.vision.Vision.Landmark,
        java.lang.Float> fieldY2;
    // required .bites.vision.Landmark self = 1;
    private boolean hasSelf;
    private bites.vision.Vision.Landmark self_ = bites.vision.Vision.Landmark.getDefaultInstance();
    public boolean hasSelf() { return hasSelf; }
    public bites.vision.Vision.Landmark getSelf() { return self_; }
    
    // repeated .bites.vision.Landmark possibles = 2;
    private java.util.List<bites.vision.Vision.Landmark> possibles_ =
      java.util.Collections.emptyList();
    public java.util.List<bites.vision.Vision.Landmark> getPossiblesList() {
      return possibles_;
    }
    public int getPossiblesCount() { return possibles_.size(); }
    public bites.vision.Vision.Landmark getPossibles(int index) {
      return possibles_.get(index);
    }
    
    // repeated .bites.vision.Line.LinePoint points = 3;
    private java.util.List<bites.vision.Vision.Line.LinePoint> points_ =
      java.util.Collections.emptyList();
    public java.util.List<bites.vision.Vision.Line.LinePoint> getPointsList() {
      return points_;
    }
    public int getPointsCount() { return points_.size(); }
    public bites.vision.Vision.Line.LinePoint getPoints(int index) {
      return points_.get(index);
    }
    
    // optional float angle = 4;
    private boolean hasAngle;
    private float angle_ = 0F;
    public boolean hasAngle() { return hasAngle; }
    public float getAngle() { return angle_; }
    
    // optional float a = 5;
    private boolean hasA;
    private float a_ = 0F;
    public boolean hasA() { return hasA; }
    public float getA() { return a_; }
    
    // optional float b = 6;
    private boolean hasB;
    private float b_ = 0F;
    public boolean hasB() { return hasB; }
    public float getB() { return b_; }
    
    // optional float length = 7;
    private boolean hasLength;
    private float length_ = 0F;
    public boolean hasLength() { return hasLength; }
    public float getLength() { return length_; }
    
    // optional float avg_vertical_width = 8;
    private boolean hasAvgVerticalWidth;
    private float avgVerticalWidth_ = 0F;
    public boolean hasAvgVerticalWidth() { return hasAvgVerticalWidth; }
    public float getAvgVerticalWidth() { return avgVerticalWidth_; }
    
    // optional float avg_horizontal_width = 9;
    private boolean hasAvgHorizontalWidth;
    private float avgHorizontalWidth_ = 0F;
    public boolean hasAvgHorizontalWidth() { return hasAvgHorizontalWidth; }
    public float getAvgHorizontalWidth() { return avgHorizontalWidth_; }
    
    // optional .bites.vision.Line.LinePoint thinnest_hor_point = 10;
    private boolean hasThinnestHorPoint;
    private bites.vision.Vision.Line.LinePoint thinnestHorPoint_ = bites.vision.Vision.Line.LinePoint.getDefaultInstance();
    public boolean hasThinnestHorPoint() { return hasThinnestHorPoint; }
    public bites.vision.Vision.Line.LinePoint getThinnestHorPoint() { return thinnestHorPoint_; }
    
    // optional .bites.vision.Line.LinePoint thickest_hor_point = 11;
    private boolean hasThickestHorPoint;
    private bites.vision.Vision.Line.LinePoint thickestHorPoint_ = bites.vision.Vision.Line.LinePoint.getDefaultInstance();
    public boolean hasThickestHorPoint() { return hasThickestHorPoint; }
    public bites.vision.Vision.Line.LinePoint getThickestHorPoint() { return thickestHorPoint_; }
    
    // optional .bites.vision.Line.LinePoint thinnest_vert_point = 12;
    private boolean hasThinnestVertPoint;
    private bites.vision.Vision.Line.LinePoint thinnestVertPoint_ = bites.vision.Vision.Line.LinePoint.getDefaultInstance();
    public boolean hasThinnestVertPoint() { return hasThinnestVertPoint; }
    public bites.vision.Vision.Line.LinePoint getThinnestVertPoint() { return thinnestVertPoint_; }
    
    // optional .bites.vision.Line.LinePoint thickest_vert_point = 13;
    private boolean hasThickestVertPoint;
    private bites.vision.Vision.Line.LinePoint thickestVertPoint_ = bites.vision.Vision.Line.LinePoint.getDefaultInstance();
    public boolean hasThickestVertPoint() { return hasThickestVertPoint; }
    public bites.vision.Vision.Line.LinePoint getThickestVertPoint() { return thickestVertPoint_; }
    
    // required .bites.vision.DistanceBearing db = 14;
    private boolean hasDb;
    private bites.vision.Vision.DistanceBearing db_ = bites.vision.Vision.DistanceBearing.getDefaultInstance();
    public boolean hasDb() { return hasDb; }
    public bites.vision.Vision.DistanceBearing getDb() { return db_; }
    
    // required bool cc_line = 15;
    private boolean hasCcLine;
    private boolean ccLine_ = false;
    public boolean hasCcLine() { return hasCcLine; }
    public boolean getCcLine() { return ccLine_; }
    
    public static bites.vision.Vision.Line parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Line parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Line parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Line parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Line parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Line parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Line parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Line parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(bites.vision.Vision.Line prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using bites.vision.Vision.Line.newBuilder()
      private Builder() {}
      
      bites.vision.Vision.Line result = new bites.vision.Vision.Line();
      
      @Override
      protected bites.vision.Vision.Line internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new bites.vision.Vision.Line();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bites.vision.Vision.Line.getDescriptor();
      }
      
      public bites.vision.Vision.Line getDefaultInstanceForType() {
        return bites.vision.Vision.Line.getDefaultInstance();
      }
      
      public bites.vision.Vision.Line build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private bites.vision.Vision.Line buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bites.vision.Vision.Line buildPartial() {
        if (result.possibles_ != java.util.Collections.EMPTY_LIST) {
          result.possibles_ =
            java.util.Collections.unmodifiableList(result.possibles_);
        }
        if (result.points_ != java.util.Collections.EMPTY_LIST) {
          result.points_ =
            java.util.Collections.unmodifiableList(result.points_);
        }
        bites.vision.Vision.Line returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required .bites.vision.Landmark self = 1;
      public boolean hasSelf() {
        return result.hasSelf();
      }
      public bites.vision.Vision.Landmark getSelf() {
        return result.getSelf();
      }
      public Builder setSelf(bites.vision.Vision.Landmark value) {
        result.hasSelf = true;
        result.self_ = value;
        return this;
      }
      public Builder setSelf(bites.vision.Vision.Landmark.Builder builderForValue) {
        result.hasSelf = true;
        result.self_ = builderForValue.build();
        return this;
      }
      public Builder mergeSelf(bites.vision.Vision.Landmark value) {
        if (result.hasSelf() &&
            result.self_ != bites.vision.Vision.Landmark.getDefaultInstance()) {
          result.self_ =
            bites.vision.Vision.Landmark.newBuilder(result.self_).mergeFrom(value).buildPartial();
        } else {
          result.self_ = value;
        }
        result.hasSelf = true;
        return this;
      }
      public Builder clearSelf() {
        result.hasSelf = false;
        result.self_ = bites.vision.Vision.Landmark.getDefaultInstance();
        return this;
      }
      
      // repeated .bites.vision.Landmark possibles = 2;
      public java.util.List<bites.vision.Vision.Landmark> getPossiblesList() {
        return java.util.Collections.unmodifiableList(result.possibles_);
      }
      public int getPossiblesCount() {
        return result.getPossiblesCount();
      }
      public bites.vision.Vision.Landmark getPossibles(int index) {
        return result.getPossibles(index);
      }
      public Builder setPossibles(int index, bites.vision.Vision.Landmark value) {
        result.possibles_.set(index, value);
        return this;
      }
      public Builder setPossibles(int index, bites.vision.Vision.Landmark.Builder builderForValue) {
        result.possibles_.set(index, builderForValue.build());
        return this;
      }
      public Builder addPossibles(bites.vision.Vision.Landmark value) {
        if (result.possibles_.isEmpty()) {
          result.possibles_ = new java.util.ArrayList<bites.vision.Vision.Landmark>();
        }
        result.possibles_.add(value);
        return this;
      }
      public Builder addPossibles(bites.vision.Vision.Landmark.Builder builderForValue) {
        if (result.possibles_.isEmpty()) {
          result.possibles_ = new java.util.ArrayList<bites.vision.Vision.Landmark>();
        }
        result.possibles_.add(builderForValue.build());
        return this;
      }
      public Builder addAllPossibles(
          java.lang.Iterable<? extends bites.vision.Vision.Landmark> values) {
        if (result.possibles_.isEmpty()) {
          result.possibles_ = new java.util.ArrayList<bites.vision.Vision.Landmark>();
        }
        super.addAll(values, result.possibles_);
        return this;
      }
      public Builder clearPossibles() {
        result.possibles_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .bites.vision.Line.LinePoint points = 3;
      public java.util.List<bites.vision.Vision.Line.LinePoint> getPointsList() {
        return java.util.Collections.unmodifiableList(result.points_);
      }
      public int getPointsCount() {
        return result.getPointsCount();
      }
      public bites.vision.Vision.Line.LinePoint getPoints(int index) {
        return result.getPoints(index);
      }
      public Builder setPoints(int index, bites.vision.Vision.Line.LinePoint value) {
        result.points_.set(index, value);
        return this;
      }
      public Builder setPoints(int index, bites.vision.Vision.Line.LinePoint.Builder builderForValue) {
        result.points_.set(index, builderForValue.build());
        return this;
      }
      public Builder addPoints(bites.vision.Vision.Line.LinePoint value) {
        if (result.points_.isEmpty()) {
          result.points_ = new java.util.ArrayList<bites.vision.Vision.Line.LinePoint>();
        }
        result.points_.add(value);
        return this;
      }
      public Builder addPoints(bites.vision.Vision.Line.LinePoint.Builder builderForValue) {
        if (result.points_.isEmpty()) {
          result.points_ = new java.util.ArrayList<bites.vision.Vision.Line.LinePoint>();
        }
        result.points_.add(builderForValue.build());
        return this;
      }
      public Builder addAllPoints(
          java.lang.Iterable<? extends bites.vision.Vision.Line.LinePoint> values) {
        if (result.points_.isEmpty()) {
          result.points_ = new java.util.ArrayList<bites.vision.Vision.Line.LinePoint>();
        }
        super.addAll(values, result.points_);
        return this;
      }
      public Builder clearPoints() {
        result.points_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional float angle = 4;
      public boolean hasAngle() {
        return result.hasAngle();
      }
      public float getAngle() {
        return result.getAngle();
      }
      public Builder setAngle(float value) {
        result.hasAngle = true;
        result.angle_ = value;
        return this;
      }
      public Builder clearAngle() {
        result.hasAngle = false;
        result.angle_ = 0F;
        return this;
      }
      
      // optional float a = 5;
      public boolean hasA() {
        return result.hasA();
      }
      public float getA() {
        return result.getA();
      }
      public Builder setA(float value) {
        result.hasA = true;
        result.a_ = value;
        return this;
      }
      public Builder clearA() {
        result.hasA = false;
        result.a_ = 0F;
        return this;
      }
      
      // optional float b = 6;
      public boolean hasB() {
        return result.hasB();
      }
      public float getB() {
        return result.getB();
      }
      public Builder setB(float value) {
        result.hasB = true;
        result.b_ = value;
        return this;
      }
      public Builder clearB() {
        result.hasB = false;
        result.b_ = 0F;
        return this;
      }
      
      // optional float length = 7;
      public boolean hasLength() {
        return result.hasLength();
      }
      public float getLength() {
        return result.getLength();
      }
      public Builder setLength(float value) {
        result.hasLength = true;
        result.length_ = value;
        return this;
      }
      public Builder clearLength() {
        result.hasLength = false;
        result.length_ = 0F;
        return this;
      }
      
      // optional float avg_vertical_width = 8;
      public boolean hasAvgVerticalWidth() {
        return result.hasAvgVerticalWidth();
      }
      public float getAvgVerticalWidth() {
        return result.getAvgVerticalWidth();
      }
      public Builder setAvgVerticalWidth(float value) {
        result.hasAvgVerticalWidth = true;
        result.avgVerticalWidth_ = value;
        return this;
      }
      public Builder clearAvgVerticalWidth() {
        result.hasAvgVerticalWidth = false;
        result.avgVerticalWidth_ = 0F;
        return this;
      }
      
      // optional float avg_horizontal_width = 9;
      public boolean hasAvgHorizontalWidth() {
        return result.hasAvgHorizontalWidth();
      }
      public float getAvgHorizontalWidth() {
        return result.getAvgHorizontalWidth();
      }
      public Builder setAvgHorizontalWidth(float value) {
        result.hasAvgHorizontalWidth = true;
        result.avgHorizontalWidth_ = value;
        return this;
      }
      public Builder clearAvgHorizontalWidth() {
        result.hasAvgHorizontalWidth = false;
        result.avgHorizontalWidth_ = 0F;
        return this;
      }
      
      // optional .bites.vision.Line.LinePoint thinnest_hor_point = 10;
      public boolean hasThinnestHorPoint() {
        return result.hasThinnestHorPoint();
      }
      public bites.vision.Vision.Line.LinePoint getThinnestHorPoint() {
        return result.getThinnestHorPoint();
      }
      public Builder setThinnestHorPoint(bites.vision.Vision.Line.LinePoint value) {
        result.hasThinnestHorPoint = true;
        result.thinnestHorPoint_ = value;
        return this;
      }
      public Builder setThinnestHorPoint(bites.vision.Vision.Line.LinePoint.Builder builderForValue) {
        result.hasThinnestHorPoint = true;
        result.thinnestHorPoint_ = builderForValue.build();
        return this;
      }
      public Builder mergeThinnestHorPoint(bites.vision.Vision.Line.LinePoint value) {
        if (result.hasThinnestHorPoint() &&
            result.thinnestHorPoint_ != bites.vision.Vision.Line.LinePoint.getDefaultInstance()) {
          result.thinnestHorPoint_ =
            bites.vision.Vision.Line.LinePoint.newBuilder(result.thinnestHorPoint_).mergeFrom(value).buildPartial();
        } else {
          result.thinnestHorPoint_ = value;
        }
        result.hasThinnestHorPoint = true;
        return this;
      }
      public Builder clearThinnestHorPoint() {
        result.hasThinnestHorPoint = false;
        result.thinnestHorPoint_ = bites.vision.Vision.Line.LinePoint.getDefaultInstance();
        return this;
      }
      
      // optional .bites.vision.Line.LinePoint thickest_hor_point = 11;
      public boolean hasThickestHorPoint() {
        return result.hasThickestHorPoint();
      }
      public bites.vision.Vision.Line.LinePoint getThickestHorPoint() {
        return result.getThickestHorPoint();
      }
      public Builder setThickestHorPoint(bites.vision.Vision.Line.LinePoint value) {
        result.hasThickestHorPoint = true;
        result.thickestHorPoint_ = value;
        return this;
      }
      public Builder setThickestHorPoint(bites.vision.Vision.Line.LinePoint.Builder builderForValue) {
        result.hasThickestHorPoint = true;
        result.thickestHorPoint_ = builderForValue.build();
        return this;
      }
      public Builder mergeThickestHorPoint(bites.vision.Vision.Line.LinePoint value) {
        if (result.hasThickestHorPoint() &&
            result.thickestHorPoint_ != bites.vision.Vision.Line.LinePoint.getDefaultInstance()) {
          result.thickestHorPoint_ =
            bites.vision.Vision.Line.LinePoint.newBuilder(result.thickestHorPoint_).mergeFrom(value).buildPartial();
        } else {
          result.thickestHorPoint_ = value;
        }
        result.hasThickestHorPoint = true;
        return this;
      }
      public Builder clearThickestHorPoint() {
        result.hasThickestHorPoint = false;
        result.thickestHorPoint_ = bites.vision.Vision.Line.LinePoint.getDefaultInstance();
        return this;
      }
      
      // optional .bites.vision.Line.LinePoint thinnest_vert_point = 12;
      public boolean hasThinnestVertPoint() {
        return result.hasThinnestVertPoint();
      }
      public bites.vision.Vision.Line.LinePoint getThinnestVertPoint() {
        return result.getThinnestVertPoint();
      }
      public Builder setThinnestVertPoint(bites.vision.Vision.Line.LinePoint value) {
        result.hasThinnestVertPoint = true;
        result.thinnestVertPoint_ = value;
        return this;
      }
      public Builder setThinnestVertPoint(bites.vision.Vision.Line.LinePoint.Builder builderForValue) {
        result.hasThinnestVertPoint = true;
        result.thinnestVertPoint_ = builderForValue.build();
        return this;
      }
      public Builder mergeThinnestVertPoint(bites.vision.Vision.Line.LinePoint value) {
        if (result.hasThinnestVertPoint() &&
            result.thinnestVertPoint_ != bites.vision.Vision.Line.LinePoint.getDefaultInstance()) {
          result.thinnestVertPoint_ =
            bites.vision.Vision.Line.LinePoint.newBuilder(result.thinnestVertPoint_).mergeFrom(value).buildPartial();
        } else {
          result.thinnestVertPoint_ = value;
        }
        result.hasThinnestVertPoint = true;
        return this;
      }
      public Builder clearThinnestVertPoint() {
        result.hasThinnestVertPoint = false;
        result.thinnestVertPoint_ = bites.vision.Vision.Line.LinePoint.getDefaultInstance();
        return this;
      }
      
      // optional .bites.vision.Line.LinePoint thickest_vert_point = 13;
      public boolean hasThickestVertPoint() {
        return result.hasThickestVertPoint();
      }
      public bites.vision.Vision.Line.LinePoint getThickestVertPoint() {
        return result.getThickestVertPoint();
      }
      public Builder setThickestVertPoint(bites.vision.Vision.Line.LinePoint value) {
        result.hasThickestVertPoint = true;
        result.thickestVertPoint_ = value;
        return this;
      }
      public Builder setThickestVertPoint(bites.vision.Vision.Line.LinePoint.Builder builderForValue) {
        result.hasThickestVertPoint = true;
        result.thickestVertPoint_ = builderForValue.build();
        return this;
      }
      public Builder mergeThickestVertPoint(bites.vision.Vision.Line.LinePoint value) {
        if (result.hasThickestVertPoint() &&
            result.thickestVertPoint_ != bites.vision.Vision.Line.LinePoint.getDefaultInstance()) {
          result.thickestVertPoint_ =
            bites.vision.Vision.Line.LinePoint.newBuilder(result.thickestVertPoint_).mergeFrom(value).buildPartial();
        } else {
          result.thickestVertPoint_ = value;
        }
        result.hasThickestVertPoint = true;
        return this;
      }
      public Builder clearThickestVertPoint() {
        result.hasThickestVertPoint = false;
        result.thickestVertPoint_ = bites.vision.Vision.Line.LinePoint.getDefaultInstance();
        return this;
      }
      
      // required .bites.vision.DistanceBearing db = 14;
      public boolean hasDb() {
        return result.hasDb();
      }
      public bites.vision.Vision.DistanceBearing getDb() {
        return result.getDb();
      }
      public Builder setDb(bites.vision.Vision.DistanceBearing value) {
        result.hasDb = true;
        result.db_ = value;
        return this;
      }
      public Builder setDb(bites.vision.Vision.DistanceBearing.Builder builderForValue) {
        result.hasDb = true;
        result.db_ = builderForValue.build();
        return this;
      }
      public Builder mergeDb(bites.vision.Vision.DistanceBearing value) {
        if (result.hasDb() &&
            result.db_ != bites.vision.Vision.DistanceBearing.getDefaultInstance()) {
          result.db_ =
            bites.vision.Vision.DistanceBearing.newBuilder(result.db_).mergeFrom(value).buildPartial();
        } else {
          result.db_ = value;
        }
        result.hasDb = true;
        return this;
      }
      public Builder clearDb() {
        result.hasDb = false;
        result.db_ = bites.vision.Vision.DistanceBearing.getDefaultInstance();
        return this;
      }
      
      // required bool cc_line = 15;
      public boolean hasCcLine() {
        return result.hasCcLine();
      }
      public boolean getCcLine() {
        return result.getCcLine();
      }
      public Builder setCcLine(boolean value) {
        result.hasCcLine = true;
        result.ccLine_ = value;
        return this;
      }
      public Builder clearCcLine() {
        result.hasCcLine = false;
        result.ccLine_ = false;
        return this;
      }
    }
    
    static {
      bites.vision.Vision.getDescriptor();
    }
  }
  
  public static final class Corner extends
      com.google.protobuf.GeneratedMessage {
    // Use Corner.newBuilder() to construct.
    private Corner() {}
    
    private static final Corner defaultInstance = new Corner();
    public static Corner getDefaultInstance() {
      return defaultInstance;
    }
    
    public Corner getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bites.vision.Vision.internal_static_bites_vision_Corner_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bites.vision.Vision.internal_static_bites_vision_Corner_fieldAccessorTable;
    }
    
    public static enum Shape {
      INNER_L(0, 0),
      OUTER_L(1, 1),
      T(2, 2),
      CIRCLE(3, 3),
      UNKNOWN(4, 4),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static Shape valueOf(int value) {
        switch (value) {
          case 0: return INNER_L;
          case 1: return OUTER_L;
          case 2: return T;
          case 3: return CIRCLE;
          case 4: return UNKNOWN;
          default: return null;
        }
      }
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return bites.vision.Vision.Corner.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final Shape[] VALUES = {
        INNER_L, OUTER_L, T, CIRCLE, UNKNOWN, 
      };
      public static Shape valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private Shape(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        bites.vision.Vision.getDescriptor();
      }
    }
    
    public static
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        bites.vision.Vision.Landmark,
        bites.vision.Vision.Corner.Shape> cornerType;
    public static
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        bites.vision.Vision.Landmark,
        java.util.List<bites.vision.Vision.Landmark>> cornerLines;
    // required .bites.vision.Landmark self = 1;
    private boolean hasSelf;
    private bites.vision.Vision.Landmark self_ = bites.vision.Vision.Landmark.getDefaultInstance();
    public boolean hasSelf() { return hasSelf; }
    public bites.vision.Vision.Landmark getSelf() { return self_; }
    
    // required .bites.vision.Detection detect = 2;
    private boolean hasDetect;
    private bites.vision.Vision.Detection detect_ = bites.vision.Vision.Detection.getDefaultInstance();
    public boolean hasDetect() { return hasDetect; }
    public bites.vision.Vision.Detection getDetect() { return detect_; }
    
    // repeated .bites.vision.Landmark possibles = 3;
    private java.util.List<bites.vision.Vision.Landmark> possibles_ =
      java.util.Collections.emptyList();
    public java.util.List<bites.vision.Vision.Landmark> getPossiblesList() {
      return possibles_;
    }
    public int getPossiblesCount() { return possibles_.size(); }
    public bites.vision.Vision.Landmark getPossibles(int index) {
      return possibles_.get(index);
    }
    
    // repeated .bites.vision.Line lines = 4;
    private java.util.List<bites.vision.Vision.Line> lines_ =
      java.util.Collections.emptyList();
    public java.util.List<bites.vision.Vision.Line> getLinesList() {
      return lines_;
    }
    public int getLinesCount() { return lines_.size(); }
    public bites.vision.Vision.Line getLines(int index) {
      return lines_.get(index);
    }
    
    // repeated float dists = 5;
    private java.util.List<java.lang.Float> dists_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Float> getDistsList() {
      return dists_;
    }
    public int getDistsCount() { return dists_.size(); }
    public float getDists(int index) {
      return dists_.get(index);
    }
    
    // repeated .bites.vision.Line t_lines = 6;
    private java.util.List<bites.vision.Vision.Line> tLines_ =
      java.util.Collections.emptyList();
    public java.util.List<bites.vision.Vision.Line> getTLinesList() {
      return tLines_;
    }
    public int getTLinesCount() { return tLines_.size(); }
    public bites.vision.Vision.Line getTLines(int index) {
      return tLines_.get(index);
    }
    
    // required float angle_between_lines = 7;
    private boolean hasAngleBetweenLines;
    private float angleBetweenLines_ = 0F;
    public boolean hasAngleBetweenLines() { return hasAngleBetweenLines; }
    public float getAngleBetweenLines() { return angleBetweenLines_; }
    
    public static bites.vision.Vision.Corner parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Corner parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Corner parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Corner parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Corner parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Corner parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Corner parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Corner parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(bites.vision.Vision.Corner prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using bites.vision.Vision.Corner.newBuilder()
      private Builder() {}
      
      bites.vision.Vision.Corner result = new bites.vision.Vision.Corner();
      
      @Override
      protected bites.vision.Vision.Corner internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new bites.vision.Vision.Corner();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bites.vision.Vision.Corner.getDescriptor();
      }
      
      public bites.vision.Vision.Corner getDefaultInstanceForType() {
        return bites.vision.Vision.Corner.getDefaultInstance();
      }
      
      public bites.vision.Vision.Corner build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private bites.vision.Vision.Corner buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bites.vision.Vision.Corner buildPartial() {
        if (result.possibles_ != java.util.Collections.EMPTY_LIST) {
          result.possibles_ =
            java.util.Collections.unmodifiableList(result.possibles_);
        }
        if (result.lines_ != java.util.Collections.EMPTY_LIST) {
          result.lines_ =
            java.util.Collections.unmodifiableList(result.lines_);
        }
        if (result.dists_ != java.util.Collections.EMPTY_LIST) {
          result.dists_ =
            java.util.Collections.unmodifiableList(result.dists_);
        }
        if (result.tLines_ != java.util.Collections.EMPTY_LIST) {
          result.tLines_ =
            java.util.Collections.unmodifiableList(result.tLines_);
        }
        bites.vision.Vision.Corner returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required .bites.vision.Landmark self = 1;
      public boolean hasSelf() {
        return result.hasSelf();
      }
      public bites.vision.Vision.Landmark getSelf() {
        return result.getSelf();
      }
      public Builder setSelf(bites.vision.Vision.Landmark value) {
        result.hasSelf = true;
        result.self_ = value;
        return this;
      }
      public Builder setSelf(bites.vision.Vision.Landmark.Builder builderForValue) {
        result.hasSelf = true;
        result.self_ = builderForValue.build();
        return this;
      }
      public Builder mergeSelf(bites.vision.Vision.Landmark value) {
        if (result.hasSelf() &&
            result.self_ != bites.vision.Vision.Landmark.getDefaultInstance()) {
          result.self_ =
            bites.vision.Vision.Landmark.newBuilder(result.self_).mergeFrom(value).buildPartial();
        } else {
          result.self_ = value;
        }
        result.hasSelf = true;
        return this;
      }
      public Builder clearSelf() {
        result.hasSelf = false;
        result.self_ = bites.vision.Vision.Landmark.getDefaultInstance();
        return this;
      }
      
      // required .bites.vision.Detection detect = 2;
      public boolean hasDetect() {
        return result.hasDetect();
      }
      public bites.vision.Vision.Detection getDetect() {
        return result.getDetect();
      }
      public Builder setDetect(bites.vision.Vision.Detection value) {
        result.hasDetect = true;
        result.detect_ = value;
        return this;
      }
      public Builder setDetect(bites.vision.Vision.Detection.Builder builderForValue) {
        result.hasDetect = true;
        result.detect_ = builderForValue.build();
        return this;
      }
      public Builder mergeDetect(bites.vision.Vision.Detection value) {
        if (result.hasDetect() &&
            result.detect_ != bites.vision.Vision.Detection.getDefaultInstance()) {
          result.detect_ =
            bites.vision.Vision.Detection.newBuilder(result.detect_).mergeFrom(value).buildPartial();
        } else {
          result.detect_ = value;
        }
        result.hasDetect = true;
        return this;
      }
      public Builder clearDetect() {
        result.hasDetect = false;
        result.detect_ = bites.vision.Vision.Detection.getDefaultInstance();
        return this;
      }
      
      // repeated .bites.vision.Landmark possibles = 3;
      public java.util.List<bites.vision.Vision.Landmark> getPossiblesList() {
        return java.util.Collections.unmodifiableList(result.possibles_);
      }
      public int getPossiblesCount() {
        return result.getPossiblesCount();
      }
      public bites.vision.Vision.Landmark getPossibles(int index) {
        return result.getPossibles(index);
      }
      public Builder setPossibles(int index, bites.vision.Vision.Landmark value) {
        result.possibles_.set(index, value);
        return this;
      }
      public Builder setPossibles(int index, bites.vision.Vision.Landmark.Builder builderForValue) {
        result.possibles_.set(index, builderForValue.build());
        return this;
      }
      public Builder addPossibles(bites.vision.Vision.Landmark value) {
        if (result.possibles_.isEmpty()) {
          result.possibles_ = new java.util.ArrayList<bites.vision.Vision.Landmark>();
        }
        result.possibles_.add(value);
        return this;
      }
      public Builder addPossibles(bites.vision.Vision.Landmark.Builder builderForValue) {
        if (result.possibles_.isEmpty()) {
          result.possibles_ = new java.util.ArrayList<bites.vision.Vision.Landmark>();
        }
        result.possibles_.add(builderForValue.build());
        return this;
      }
      public Builder addAllPossibles(
          java.lang.Iterable<? extends bites.vision.Vision.Landmark> values) {
        if (result.possibles_.isEmpty()) {
          result.possibles_ = new java.util.ArrayList<bites.vision.Vision.Landmark>();
        }
        super.addAll(values, result.possibles_);
        return this;
      }
      public Builder clearPossibles() {
        result.possibles_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .bites.vision.Line lines = 4;
      public java.util.List<bites.vision.Vision.Line> getLinesList() {
        return java.util.Collections.unmodifiableList(result.lines_);
      }
      public int getLinesCount() {
        return result.getLinesCount();
      }
      public bites.vision.Vision.Line getLines(int index) {
        return result.getLines(index);
      }
      public Builder setLines(int index, bites.vision.Vision.Line value) {
        result.lines_.set(index, value);
        return this;
      }
      public Builder setLines(int index, bites.vision.Vision.Line.Builder builderForValue) {
        result.lines_.set(index, builderForValue.build());
        return this;
      }
      public Builder addLines(bites.vision.Vision.Line value) {
        if (result.lines_.isEmpty()) {
          result.lines_ = new java.util.ArrayList<bites.vision.Vision.Line>();
        }
        result.lines_.add(value);
        return this;
      }
      public Builder addLines(bites.vision.Vision.Line.Builder builderForValue) {
        if (result.lines_.isEmpty()) {
          result.lines_ = new java.util.ArrayList<bites.vision.Vision.Line>();
        }
        result.lines_.add(builderForValue.build());
        return this;
      }
      public Builder addAllLines(
          java.lang.Iterable<? extends bites.vision.Vision.Line> values) {
        if (result.lines_.isEmpty()) {
          result.lines_ = new java.util.ArrayList<bites.vision.Vision.Line>();
        }
        super.addAll(values, result.lines_);
        return this;
      }
      public Builder clearLines() {
        result.lines_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated float dists = 5;
      public java.util.List<java.lang.Float> getDistsList() {
        return java.util.Collections.unmodifiableList(result.dists_);
      }
      public int getDistsCount() {
        return result.getDistsCount();
      }
      public float getDists(int index) {
        return result.getDists(index);
      }
      public Builder setDists(int index, float value) {
        result.dists_.set(index, value);
        return this;
      }
      public Builder addDists(float value) {
        if (result.dists_.isEmpty()) {
          result.dists_ = new java.util.ArrayList<java.lang.Float>();
        }
        result.dists_.add(value);
        return this;
      }
      public Builder addAllDists(
          java.lang.Iterable<? extends java.lang.Float> values) {
        if (result.dists_.isEmpty()) {
          result.dists_ = new java.util.ArrayList<java.lang.Float>();
        }
        super.addAll(values, result.dists_);
        return this;
      }
      public Builder clearDists() {
        result.dists_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .bites.vision.Line t_lines = 6;
      public java.util.List<bites.vision.Vision.Line> getTLinesList() {
        return java.util.Collections.unmodifiableList(result.tLines_);
      }
      public int getTLinesCount() {
        return result.getTLinesCount();
      }
      public bites.vision.Vision.Line getTLines(int index) {
        return result.getTLines(index);
      }
      public Builder setTLines(int index, bites.vision.Vision.Line value) {
        result.tLines_.set(index, value);
        return this;
      }
      public Builder setTLines(int index, bites.vision.Vision.Line.Builder builderForValue) {
        result.tLines_.set(index, builderForValue.build());
        return this;
      }
      public Builder addTLines(bites.vision.Vision.Line value) {
        if (result.tLines_.isEmpty()) {
          result.tLines_ = new java.util.ArrayList<bites.vision.Vision.Line>();
        }
        result.tLines_.add(value);
        return this;
      }
      public Builder addTLines(bites.vision.Vision.Line.Builder builderForValue) {
        if (result.tLines_.isEmpty()) {
          result.tLines_ = new java.util.ArrayList<bites.vision.Vision.Line>();
        }
        result.tLines_.add(builderForValue.build());
        return this;
      }
      public Builder addAllTLines(
          java.lang.Iterable<? extends bites.vision.Vision.Line> values) {
        if (result.tLines_.isEmpty()) {
          result.tLines_ = new java.util.ArrayList<bites.vision.Vision.Line>();
        }
        super.addAll(values, result.tLines_);
        return this;
      }
      public Builder clearTLines() {
        result.tLines_ = java.util.Collections.emptyList();
        return this;
      }
      
      // required float angle_between_lines = 7;
      public boolean hasAngleBetweenLines() {
        return result.hasAngleBetweenLines();
      }
      public float getAngleBetweenLines() {
        return result.getAngleBetweenLines();
      }
      public Builder setAngleBetweenLines(float value) {
        result.hasAngleBetweenLines = true;
        result.angleBetweenLines_ = value;
        return this;
      }
      public Builder clearAngleBetweenLines() {
        result.hasAngleBetweenLines = false;
        result.angleBetweenLines_ = 0F;
        return this;
      }
    }
    
    static {
      bites.vision.Vision.getDescriptor();
    }
  }
  
  public static final class Cross extends
      com.google.protobuf.GeneratedMessage {
    // Use Cross.newBuilder() to construct.
    private Cross() {}
    
    private static final Cross defaultInstance = new Cross();
    public static Cross getDefaultInstance() {
      return defaultInstance;
    }
    
    public Cross getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bites.vision.Vision.internal_static_bites_vision_Cross_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bites.vision.Vision.internal_static_bites_vision_Cross_fieldAccessorTable;
    }
    
    // required .bites.vision.Landmark self = 1;
    private boolean hasSelf;
    private bites.vision.Vision.Landmark self_ = bites.vision.Vision.Landmark.getDefaultInstance();
    public boolean hasSelf() { return hasSelf; }
    public bites.vision.Vision.Landmark getSelf() { return self_; }
    
    // required .bites.vision.Detection detect = 2;
    private boolean hasDetect;
    private bites.vision.Vision.Detection detect_ = bites.vision.Vision.Detection.getDefaultInstance();
    public boolean hasDetect() { return hasDetect; }
    public bites.vision.Vision.Detection getDetect() { return detect_; }
    
    // repeated .bites.vision.Landmark possibles = 3;
    private java.util.List<bites.vision.Vision.Landmark> possibles_ =
      java.util.Collections.emptyList();
    public java.util.List<bites.vision.Vision.Landmark> getPossiblesList() {
      return possibles_;
    }
    public int getPossiblesCount() { return possibles_.size(); }
    public bites.vision.Vision.Landmark getPossibles(int index) {
      return possibles_.get(index);
    }
    
    // required .bites.Rectangle bounds = 4;
    private boolean hasBounds;
    private bites.Structs.Rectangle bounds_ = bites.Structs.Rectangle.getDefaultInstance();
    public boolean hasBounds() { return hasBounds; }
    public bites.Structs.Rectangle getBounds() { return bounds_; }
    
    public static bites.vision.Vision.Cross parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Cross parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Cross parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Cross parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Cross parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Cross parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Cross parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Cross parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(bites.vision.Vision.Cross prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using bites.vision.Vision.Cross.newBuilder()
      private Builder() {}
      
      bites.vision.Vision.Cross result = new bites.vision.Vision.Cross();
      
      @Override
      protected bites.vision.Vision.Cross internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new bites.vision.Vision.Cross();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bites.vision.Vision.Cross.getDescriptor();
      }
      
      public bites.vision.Vision.Cross getDefaultInstanceForType() {
        return bites.vision.Vision.Cross.getDefaultInstance();
      }
      
      public bites.vision.Vision.Cross build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private bites.vision.Vision.Cross buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bites.vision.Vision.Cross buildPartial() {
        if (result.possibles_ != java.util.Collections.EMPTY_LIST) {
          result.possibles_ =
            java.util.Collections.unmodifiableList(result.possibles_);
        }
        bites.vision.Vision.Cross returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required .bites.vision.Landmark self = 1;
      public boolean hasSelf() {
        return result.hasSelf();
      }
      public bites.vision.Vision.Landmark getSelf() {
        return result.getSelf();
      }
      public Builder setSelf(bites.vision.Vision.Landmark value) {
        result.hasSelf = true;
        result.self_ = value;
        return this;
      }
      public Builder setSelf(bites.vision.Vision.Landmark.Builder builderForValue) {
        result.hasSelf = true;
        result.self_ = builderForValue.build();
        return this;
      }
      public Builder mergeSelf(bites.vision.Vision.Landmark value) {
        if (result.hasSelf() &&
            result.self_ != bites.vision.Vision.Landmark.getDefaultInstance()) {
          result.self_ =
            bites.vision.Vision.Landmark.newBuilder(result.self_).mergeFrom(value).buildPartial();
        } else {
          result.self_ = value;
        }
        result.hasSelf = true;
        return this;
      }
      public Builder clearSelf() {
        result.hasSelf = false;
        result.self_ = bites.vision.Vision.Landmark.getDefaultInstance();
        return this;
      }
      
      // required .bites.vision.Detection detect = 2;
      public boolean hasDetect() {
        return result.hasDetect();
      }
      public bites.vision.Vision.Detection getDetect() {
        return result.getDetect();
      }
      public Builder setDetect(bites.vision.Vision.Detection value) {
        result.hasDetect = true;
        result.detect_ = value;
        return this;
      }
      public Builder setDetect(bites.vision.Vision.Detection.Builder builderForValue) {
        result.hasDetect = true;
        result.detect_ = builderForValue.build();
        return this;
      }
      public Builder mergeDetect(bites.vision.Vision.Detection value) {
        if (result.hasDetect() &&
            result.detect_ != bites.vision.Vision.Detection.getDefaultInstance()) {
          result.detect_ =
            bites.vision.Vision.Detection.newBuilder(result.detect_).mergeFrom(value).buildPartial();
        } else {
          result.detect_ = value;
        }
        result.hasDetect = true;
        return this;
      }
      public Builder clearDetect() {
        result.hasDetect = false;
        result.detect_ = bites.vision.Vision.Detection.getDefaultInstance();
        return this;
      }
      
      // repeated .bites.vision.Landmark possibles = 3;
      public java.util.List<bites.vision.Vision.Landmark> getPossiblesList() {
        return java.util.Collections.unmodifiableList(result.possibles_);
      }
      public int getPossiblesCount() {
        return result.getPossiblesCount();
      }
      public bites.vision.Vision.Landmark getPossibles(int index) {
        return result.getPossibles(index);
      }
      public Builder setPossibles(int index, bites.vision.Vision.Landmark value) {
        result.possibles_.set(index, value);
        return this;
      }
      public Builder setPossibles(int index, bites.vision.Vision.Landmark.Builder builderForValue) {
        result.possibles_.set(index, builderForValue.build());
        return this;
      }
      public Builder addPossibles(bites.vision.Vision.Landmark value) {
        if (result.possibles_.isEmpty()) {
          result.possibles_ = new java.util.ArrayList<bites.vision.Vision.Landmark>();
        }
        result.possibles_.add(value);
        return this;
      }
      public Builder addPossibles(bites.vision.Vision.Landmark.Builder builderForValue) {
        if (result.possibles_.isEmpty()) {
          result.possibles_ = new java.util.ArrayList<bites.vision.Vision.Landmark>();
        }
        result.possibles_.add(builderForValue.build());
        return this;
      }
      public Builder addAllPossibles(
          java.lang.Iterable<? extends bites.vision.Vision.Landmark> values) {
        if (result.possibles_.isEmpty()) {
          result.possibles_ = new java.util.ArrayList<bites.vision.Vision.Landmark>();
        }
        super.addAll(values, result.possibles_);
        return this;
      }
      public Builder clearPossibles() {
        result.possibles_ = java.util.Collections.emptyList();
        return this;
      }
      
      // required .bites.Rectangle bounds = 4;
      public boolean hasBounds() {
        return result.hasBounds();
      }
      public bites.Structs.Rectangle getBounds() {
        return result.getBounds();
      }
      public Builder setBounds(bites.Structs.Rectangle value) {
        result.hasBounds = true;
        result.bounds_ = value;
        return this;
      }
      public Builder setBounds(bites.Structs.Rectangle.Builder builderForValue) {
        result.hasBounds = true;
        result.bounds_ = builderForValue.build();
        return this;
      }
      public Builder mergeBounds(bites.Structs.Rectangle value) {
        if (result.hasBounds() &&
            result.bounds_ != bites.Structs.Rectangle.getDefaultInstance()) {
          result.bounds_ =
            bites.Structs.Rectangle.newBuilder(result.bounds_).mergeFrom(value).buildPartial();
        } else {
          result.bounds_ = value;
        }
        result.hasBounds = true;
        return this;
      }
      public Builder clearBounds() {
        result.hasBounds = false;
        result.bounds_ = bites.Structs.Rectangle.getDefaultInstance();
        return this;
      }
    }
    
    static {
      bites.vision.Vision.getDescriptor();
    }
  }
  
  public static final class CrossBar extends
      com.google.protobuf.GeneratedMessage {
    // Use CrossBar.newBuilder() to construct.
    private CrossBar() {}
    
    private static final CrossBar defaultInstance = new CrossBar();
    public static CrossBar getDefaultInstance() {
      return defaultInstance;
    }
    
    public CrossBar getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bites.vision.Vision.internal_static_bites_vision_CrossBar_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bites.vision.Vision.internal_static_bites_vision_CrossBar_fieldAccessorTable;
    }
    
    // required .bites.vision.Detection detect = 1;
    private boolean hasDetect;
    private bites.vision.Vision.Detection detect_ = bites.vision.Vision.Detection.getDefaultInstance();
    public boolean hasDetect() { return hasDetect; }
    public bites.vision.Vision.Detection getDetect() { return detect_; }
    
    // required .bites.Rectangle bounds = 2;
    private boolean hasBounds;
    private bites.Structs.Rectangle bounds_ = bites.Structs.Rectangle.getDefaultInstance();
    public boolean hasBounds() { return hasBounds; }
    public bites.Structs.Rectangle getBounds() { return bounds_; }
    
    public static bites.vision.Vision.CrossBar parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.CrossBar parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.CrossBar parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.CrossBar parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.CrossBar parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.CrossBar parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.CrossBar parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.CrossBar parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(bites.vision.Vision.CrossBar prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using bites.vision.Vision.CrossBar.newBuilder()
      private Builder() {}
      
      bites.vision.Vision.CrossBar result = new bites.vision.Vision.CrossBar();
      
      @Override
      protected bites.vision.Vision.CrossBar internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new bites.vision.Vision.CrossBar();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bites.vision.Vision.CrossBar.getDescriptor();
      }
      
      public bites.vision.Vision.CrossBar getDefaultInstanceForType() {
        return bites.vision.Vision.CrossBar.getDefaultInstance();
      }
      
      public bites.vision.Vision.CrossBar build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private bites.vision.Vision.CrossBar buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bites.vision.Vision.CrossBar buildPartial() {
        bites.vision.Vision.CrossBar returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required .bites.vision.Detection detect = 1;
      public boolean hasDetect() {
        return result.hasDetect();
      }
      public bites.vision.Vision.Detection getDetect() {
        return result.getDetect();
      }
      public Builder setDetect(bites.vision.Vision.Detection value) {
        result.hasDetect = true;
        result.detect_ = value;
        return this;
      }
      public Builder setDetect(bites.vision.Vision.Detection.Builder builderForValue) {
        result.hasDetect = true;
        result.detect_ = builderForValue.build();
        return this;
      }
      public Builder mergeDetect(bites.vision.Vision.Detection value) {
        if (result.hasDetect() &&
            result.detect_ != bites.vision.Vision.Detection.getDefaultInstance()) {
          result.detect_ =
            bites.vision.Vision.Detection.newBuilder(result.detect_).mergeFrom(value).buildPartial();
        } else {
          result.detect_ = value;
        }
        result.hasDetect = true;
        return this;
      }
      public Builder clearDetect() {
        result.hasDetect = false;
        result.detect_ = bites.vision.Vision.Detection.getDefaultInstance();
        return this;
      }
      
      // required .bites.Rectangle bounds = 2;
      public boolean hasBounds() {
        return result.hasBounds();
      }
      public bites.Structs.Rectangle getBounds() {
        return result.getBounds();
      }
      public Builder setBounds(bites.Structs.Rectangle value) {
        result.hasBounds = true;
        result.bounds_ = value;
        return this;
      }
      public Builder setBounds(bites.Structs.Rectangle.Builder builderForValue) {
        result.hasBounds = true;
        result.bounds_ = builderForValue.build();
        return this;
      }
      public Builder mergeBounds(bites.Structs.Rectangle value) {
        if (result.hasBounds() &&
            result.bounds_ != bites.Structs.Rectangle.getDefaultInstance()) {
          result.bounds_ =
            bites.Structs.Rectangle.newBuilder(result.bounds_).mergeFrom(value).buildPartial();
        } else {
          result.bounds_ = value;
        }
        result.hasBounds = true;
        return this;
      }
      public Builder clearBounds() {
        result.hasBounds = false;
        result.bounds_ = bites.Structs.Rectangle.getDefaultInstance();
        return this;
      }
    }
    
    static {
      bites.vision.Vision.getDescriptor();
    }
  }
  
  public static final class FieldObject extends
      com.google.protobuf.GeneratedMessage {
    // Use FieldObject.newBuilder() to construct.
    private FieldObject() {}
    
    private static final FieldObject defaultInstance = new FieldObject();
    public static FieldObject getDefaultInstance() {
      return defaultInstance;
    }
    
    public FieldObject getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bites.vision.Vision.internal_static_bites_vision_FieldObject_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bites.vision.Vision.internal_static_bites_vision_FieldObject_fieldAccessorTable;
    }
    
    // required .bites.vision.Landmark self = 1;
    private boolean hasSelf;
    private bites.vision.Vision.Landmark self_ = bites.vision.Vision.Landmark.getDefaultInstance();
    public boolean hasSelf() { return hasSelf; }
    public bites.vision.Vision.Landmark getSelf() { return self_; }
    
    // required .bites.vision.Landmark possibles = 2;
    private boolean hasPossibles;
    private bites.vision.Vision.Landmark possibles_ = bites.vision.Vision.Landmark.getDefaultInstance();
    public boolean hasPossibles() { return hasPossibles; }
    public bites.vision.Vision.Landmark getPossibles() { return possibles_; }
    
    // required .bites.Rectangle bounds = 3;
    private boolean hasBounds;
    private bites.Structs.Rectangle bounds_ = bites.Structs.Rectangle.getDefaultInstance();
    public boolean hasBounds() { return hasBounds; }
    public bites.Structs.Rectangle getBounds() { return bounds_; }
    
    public static bites.vision.Vision.FieldObject parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.FieldObject parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.FieldObject parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.FieldObject parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.FieldObject parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.FieldObject parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.FieldObject parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.FieldObject parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(bites.vision.Vision.FieldObject prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using bites.vision.Vision.FieldObject.newBuilder()
      private Builder() {}
      
      bites.vision.Vision.FieldObject result = new bites.vision.Vision.FieldObject();
      
      @Override
      protected bites.vision.Vision.FieldObject internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new bites.vision.Vision.FieldObject();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bites.vision.Vision.FieldObject.getDescriptor();
      }
      
      public bites.vision.Vision.FieldObject getDefaultInstanceForType() {
        return bites.vision.Vision.FieldObject.getDefaultInstance();
      }
      
      public bites.vision.Vision.FieldObject build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private bites.vision.Vision.FieldObject buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bites.vision.Vision.FieldObject buildPartial() {
        bites.vision.Vision.FieldObject returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required .bites.vision.Landmark self = 1;
      public boolean hasSelf() {
        return result.hasSelf();
      }
      public bites.vision.Vision.Landmark getSelf() {
        return result.getSelf();
      }
      public Builder setSelf(bites.vision.Vision.Landmark value) {
        result.hasSelf = true;
        result.self_ = value;
        return this;
      }
      public Builder setSelf(bites.vision.Vision.Landmark.Builder builderForValue) {
        result.hasSelf = true;
        result.self_ = builderForValue.build();
        return this;
      }
      public Builder mergeSelf(bites.vision.Vision.Landmark value) {
        if (result.hasSelf() &&
            result.self_ != bites.vision.Vision.Landmark.getDefaultInstance()) {
          result.self_ =
            bites.vision.Vision.Landmark.newBuilder(result.self_).mergeFrom(value).buildPartial();
        } else {
          result.self_ = value;
        }
        result.hasSelf = true;
        return this;
      }
      public Builder clearSelf() {
        result.hasSelf = false;
        result.self_ = bites.vision.Vision.Landmark.getDefaultInstance();
        return this;
      }
      
      // required .bites.vision.Landmark possibles = 2;
      public boolean hasPossibles() {
        return result.hasPossibles();
      }
      public bites.vision.Vision.Landmark getPossibles() {
        return result.getPossibles();
      }
      public Builder setPossibles(bites.vision.Vision.Landmark value) {
        result.hasPossibles = true;
        result.possibles_ = value;
        return this;
      }
      public Builder setPossibles(bites.vision.Vision.Landmark.Builder builderForValue) {
        result.hasPossibles = true;
        result.possibles_ = builderForValue.build();
        return this;
      }
      public Builder mergePossibles(bites.vision.Vision.Landmark value) {
        if (result.hasPossibles() &&
            result.possibles_ != bites.vision.Vision.Landmark.getDefaultInstance()) {
          result.possibles_ =
            bites.vision.Vision.Landmark.newBuilder(result.possibles_).mergeFrom(value).buildPartial();
        } else {
          result.possibles_ = value;
        }
        result.hasPossibles = true;
        return this;
      }
      public Builder clearPossibles() {
        result.hasPossibles = false;
        result.possibles_ = bites.vision.Vision.Landmark.getDefaultInstance();
        return this;
      }
      
      // required .bites.Rectangle bounds = 3;
      public boolean hasBounds() {
        return result.hasBounds();
      }
      public bites.Structs.Rectangle getBounds() {
        return result.getBounds();
      }
      public Builder setBounds(bites.Structs.Rectangle value) {
        result.hasBounds = true;
        result.bounds_ = value;
        return this;
      }
      public Builder setBounds(bites.Structs.Rectangle.Builder builderForValue) {
        result.hasBounds = true;
        result.bounds_ = builderForValue.build();
        return this;
      }
      public Builder mergeBounds(bites.Structs.Rectangle value) {
        if (result.hasBounds() &&
            result.bounds_ != bites.Structs.Rectangle.getDefaultInstance()) {
          result.bounds_ =
            bites.Structs.Rectangle.newBuilder(result.bounds_).mergeFrom(value).buildPartial();
        } else {
          result.bounds_ = value;
        }
        result.hasBounds = true;
        return this;
      }
      public Builder clearBounds() {
        result.hasBounds = false;
        result.bounds_ = bites.Structs.Rectangle.getDefaultInstance();
        return this;
      }
    }
    
    static {
      bites.vision.Vision.getDescriptor();
    }
  }
  
  public static final class Robot extends
      com.google.protobuf.GeneratedMessage {
    // Use Robot.newBuilder() to construct.
    private Robot() {}
    
    private static final Robot defaultInstance = new Robot();
    public static Robot getDefaultInstance() {
      return defaultInstance;
    }
    
    public Robot getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bites.vision.Vision.internal_static_bites_vision_Robot_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bites.vision.Vision.internal_static_bites_vision_Robot_fieldAccessorTable;
    }
    
    // required .bites.vision.Detection detect = 1;
    private boolean hasDetect;
    private bites.vision.Vision.Detection detect_ = bites.vision.Vision.Detection.getDefaultInstance();
    public boolean hasDetect() { return hasDetect; }
    public bites.vision.Vision.Detection getDetect() { return detect_; }
    
    // required .bites.Rectangle bounds = 2;
    private boolean hasBounds;
    private bites.Structs.Rectangle bounds_ = bites.Structs.Rectangle.getDefaultInstance();
    public boolean hasBounds() { return hasBounds; }
    public bites.Structs.Rectangle getBounds() { return bounds_; }
    
    // required int32 back_left = 3;
    private boolean hasBackLeft;
    private int backLeft_ = 0;
    public boolean hasBackLeft() { return hasBackLeft; }
    public int getBackLeft() { return backLeft_; }
    
    // required int32 back_right = 4;
    private boolean hasBackRight;
    private int backRight_ = 0;
    public boolean hasBackRight() { return hasBackRight; }
    public int getBackRight() { return backRight_; }
    
    // required int32 back_dir = 5;
    private boolean hasBackDir;
    private int backDir_ = 0;
    public boolean hasBackDir() { return hasBackDir; }
    public int getBackDir() { return backDir_; }
    
    public static bites.vision.Vision.Robot parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Robot parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Robot parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Robot parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Robot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Robot parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Robot parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Robot parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(bites.vision.Vision.Robot prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using bites.vision.Vision.Robot.newBuilder()
      private Builder() {}
      
      bites.vision.Vision.Robot result = new bites.vision.Vision.Robot();
      
      @Override
      protected bites.vision.Vision.Robot internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new bites.vision.Vision.Robot();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bites.vision.Vision.Robot.getDescriptor();
      }
      
      public bites.vision.Vision.Robot getDefaultInstanceForType() {
        return bites.vision.Vision.Robot.getDefaultInstance();
      }
      
      public bites.vision.Vision.Robot build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private bites.vision.Vision.Robot buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bites.vision.Vision.Robot buildPartial() {
        bites.vision.Vision.Robot returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required .bites.vision.Detection detect = 1;
      public boolean hasDetect() {
        return result.hasDetect();
      }
      public bites.vision.Vision.Detection getDetect() {
        return result.getDetect();
      }
      public Builder setDetect(bites.vision.Vision.Detection value) {
        result.hasDetect = true;
        result.detect_ = value;
        return this;
      }
      public Builder setDetect(bites.vision.Vision.Detection.Builder builderForValue) {
        result.hasDetect = true;
        result.detect_ = builderForValue.build();
        return this;
      }
      public Builder mergeDetect(bites.vision.Vision.Detection value) {
        if (result.hasDetect() &&
            result.detect_ != bites.vision.Vision.Detection.getDefaultInstance()) {
          result.detect_ =
            bites.vision.Vision.Detection.newBuilder(result.detect_).mergeFrom(value).buildPartial();
        } else {
          result.detect_ = value;
        }
        result.hasDetect = true;
        return this;
      }
      public Builder clearDetect() {
        result.hasDetect = false;
        result.detect_ = bites.vision.Vision.Detection.getDefaultInstance();
        return this;
      }
      
      // required .bites.Rectangle bounds = 2;
      public boolean hasBounds() {
        return result.hasBounds();
      }
      public bites.Structs.Rectangle getBounds() {
        return result.getBounds();
      }
      public Builder setBounds(bites.Structs.Rectangle value) {
        result.hasBounds = true;
        result.bounds_ = value;
        return this;
      }
      public Builder setBounds(bites.Structs.Rectangle.Builder builderForValue) {
        result.hasBounds = true;
        result.bounds_ = builderForValue.build();
        return this;
      }
      public Builder mergeBounds(bites.Structs.Rectangle value) {
        if (result.hasBounds() &&
            result.bounds_ != bites.Structs.Rectangle.getDefaultInstance()) {
          result.bounds_ =
            bites.Structs.Rectangle.newBuilder(result.bounds_).mergeFrom(value).buildPartial();
        } else {
          result.bounds_ = value;
        }
        result.hasBounds = true;
        return this;
      }
      public Builder clearBounds() {
        result.hasBounds = false;
        result.bounds_ = bites.Structs.Rectangle.getDefaultInstance();
        return this;
      }
      
      // required int32 back_left = 3;
      public boolean hasBackLeft() {
        return result.hasBackLeft();
      }
      public int getBackLeft() {
        return result.getBackLeft();
      }
      public Builder setBackLeft(int value) {
        result.hasBackLeft = true;
        result.backLeft_ = value;
        return this;
      }
      public Builder clearBackLeft() {
        result.hasBackLeft = false;
        result.backLeft_ = 0;
        return this;
      }
      
      // required int32 back_right = 4;
      public boolean hasBackRight() {
        return result.hasBackRight();
      }
      public int getBackRight() {
        return result.getBackRight();
      }
      public Builder setBackRight(int value) {
        result.hasBackRight = true;
        result.backRight_ = value;
        return this;
      }
      public Builder clearBackRight() {
        result.hasBackRight = false;
        result.backRight_ = 0;
        return this;
      }
      
      // required int32 back_dir = 5;
      public boolean hasBackDir() {
        return result.hasBackDir();
      }
      public int getBackDir() {
        return result.getBackDir();
      }
      public Builder setBackDir(int value) {
        result.hasBackDir = true;
        result.backDir_ = value;
        return this;
      }
      public Builder clearBackDir() {
        result.hasBackDir = false;
        result.backDir_ = 0;
        return this;
      }
    }
    
    static {
      bites.vision.Vision.getDescriptor();
    }
  }
  
  public static final class Ball extends
      com.google.protobuf.GeneratedMessage {
    // Use Ball.newBuilder() to construct.
    private Ball() {}
    
    private static final Ball defaultInstance = new Ball();
    public static Ball getDefaultInstance() {
      return defaultInstance;
    }
    
    public Ball getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bites.vision.Vision.internal_static_bites_vision_Ball_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bites.vision.Vision.internal_static_bites_vision_Ball_fieldAccessorTable;
    }
    
    // required .bites.vision.Detection detect = 1;
    private boolean hasDetect;
    private bites.vision.Vision.Detection detect_ = bites.vision.Vision.Detection.getDefaultInstance();
    public boolean hasDetect() { return hasDetect; }
    public bites.vision.Vision.Detection getDetect() { return detect_; }
    
    // required float radius = 2;
    private boolean hasRadius;
    private float radius_ = 0F;
    public boolean hasRadius() { return hasRadius; }
    public float getRadius() { return radius_; }
    
    // required int32 confidence = 3;
    private boolean hasConfidence;
    private int confidence_ = 0;
    public boolean hasConfidence() { return hasConfidence; }
    public int getConfidence() { return confidence_; }
    
    public static bites.vision.Vision.Ball parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Ball parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Ball parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Ball parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Ball parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Ball parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Ball parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Ball parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(bites.vision.Vision.Ball prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using bites.vision.Vision.Ball.newBuilder()
      private Builder() {}
      
      bites.vision.Vision.Ball result = new bites.vision.Vision.Ball();
      
      @Override
      protected bites.vision.Vision.Ball internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new bites.vision.Vision.Ball();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bites.vision.Vision.Ball.getDescriptor();
      }
      
      public bites.vision.Vision.Ball getDefaultInstanceForType() {
        return bites.vision.Vision.Ball.getDefaultInstance();
      }
      
      public bites.vision.Vision.Ball build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private bites.vision.Vision.Ball buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bites.vision.Vision.Ball buildPartial() {
        bites.vision.Vision.Ball returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // required .bites.vision.Detection detect = 1;
      public boolean hasDetect() {
        return result.hasDetect();
      }
      public bites.vision.Vision.Detection getDetect() {
        return result.getDetect();
      }
      public Builder setDetect(bites.vision.Vision.Detection value) {
        result.hasDetect = true;
        result.detect_ = value;
        return this;
      }
      public Builder setDetect(bites.vision.Vision.Detection.Builder builderForValue) {
        result.hasDetect = true;
        result.detect_ = builderForValue.build();
        return this;
      }
      public Builder mergeDetect(bites.vision.Vision.Detection value) {
        if (result.hasDetect() &&
            result.detect_ != bites.vision.Vision.Detection.getDefaultInstance()) {
          result.detect_ =
            bites.vision.Vision.Detection.newBuilder(result.detect_).mergeFrom(value).buildPartial();
        } else {
          result.detect_ = value;
        }
        result.hasDetect = true;
        return this;
      }
      public Builder clearDetect() {
        result.hasDetect = false;
        result.detect_ = bites.vision.Vision.Detection.getDefaultInstance();
        return this;
      }
      
      // required float radius = 2;
      public boolean hasRadius() {
        return result.hasRadius();
      }
      public float getRadius() {
        return result.getRadius();
      }
      public Builder setRadius(float value) {
        result.hasRadius = true;
        result.radius_ = value;
        return this;
      }
      public Builder clearRadius() {
        result.hasRadius = false;
        result.radius_ = 0F;
        return this;
      }
      
      // required int32 confidence = 3;
      public boolean hasConfidence() {
        return result.hasConfidence();
      }
      public int getConfidence() {
        return result.getConfidence();
      }
      public Builder setConfidence(int value) {
        result.hasConfidence = true;
        result.confidence_ = value;
        return this;
      }
      public Builder clearConfidence() {
        result.hasConfidence = false;
        result.confidence_ = 0;
        return this;
      }
    }
    
    static {
      bites.vision.Vision.getDescriptor();
    }
  }
  
  public static final class Frame extends
      com.google.protobuf.GeneratedMessage {
    // Use Frame.newBuilder() to construct.
    private Frame() {}
    
    private static final Frame defaultInstance = new Frame();
    public static Frame getDefaultInstance() {
      return defaultInstance;
    }
    
    public Frame getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bites.vision.Vision.internal_static_bites_vision_Frame_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bites.vision.Vision.internal_static_bites_vision_Frame_fieldAccessorTable;
    }
    
    // optional .bites.vision.Image image = 1;
    private boolean hasImage;
    private bites.vision.Vision.Image image_ = bites.vision.Vision.Image.getDefaultInstance();
    public boolean hasImage() { return hasImage; }
    public bites.vision.Vision.Image getImage() { return image_; }
    
    // repeated .bites.vision.Ball balls = 2;
    private java.util.List<bites.vision.Vision.Ball> balls_ =
      java.util.Collections.emptyList();
    public java.util.List<bites.vision.Vision.Ball> getBallsList() {
      return balls_;
    }
    public int getBallsCount() { return balls_.size(); }
    public bites.vision.Vision.Ball getBalls(int index) {
      return balls_.get(index);
    }
    
    // repeated .bites.vision.FieldObject objects = 3;
    private java.util.List<bites.vision.Vision.FieldObject> objects_ =
      java.util.Collections.emptyList();
    public java.util.List<bites.vision.Vision.FieldObject> getObjectsList() {
      return objects_;
    }
    public int getObjectsCount() { return objects_.size(); }
    public bites.vision.Vision.FieldObject getObjects(int index) {
      return objects_.get(index);
    }
    
    // repeated .bites.vision.Line lines = 4;
    private java.util.List<bites.vision.Vision.Line> lines_ =
      java.util.Collections.emptyList();
    public java.util.List<bites.vision.Vision.Line> getLinesList() {
      return lines_;
    }
    public int getLinesCount() { return lines_.size(); }
    public bites.vision.Vision.Line getLines(int index) {
      return lines_.get(index);
    }
    
    // repeated .bites.vision.Corner corners = 5;
    private java.util.List<bites.vision.Vision.Corner> corners_ =
      java.util.Collections.emptyList();
    public java.util.List<bites.vision.Vision.Corner> getCornersList() {
      return corners_;
    }
    public int getCornersCount() { return corners_.size(); }
    public bites.vision.Vision.Corner getCorners(int index) {
      return corners_.get(index);
    }
    
    // repeated .bites.vision.Robot robots = 6;
    private java.util.List<bites.vision.Vision.Robot> robots_ =
      java.util.Collections.emptyList();
    public java.util.List<bites.vision.Vision.Robot> getRobotsList() {
      return robots_;
    }
    public int getRobotsCount() { return robots_.size(); }
    public bites.vision.Vision.Robot getRobots(int index) {
      return robots_.get(index);
    }
    
    public static bites.vision.Vision.Frame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Frame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Frame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bites.vision.Vision.Frame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Frame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Frame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bites.vision.Vision.Frame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bites.vision.Vision.Frame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistry extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return new Builder(); }
    public Builder newBuilderForType() { return new Builder(); }
    public static Builder newBuilder(bites.vision.Vision.Frame prototype) {
      return new Builder().mergeFrom(prototype);
    }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      // Construct using bites.vision.Vision.Frame.newBuilder()
      private Builder() {}
      
      bites.vision.Vision.Frame result = new bites.vision.Vision.Frame();
      
      @Override
      protected bites.vision.Vision.Frame internalGetResult() {
        return result;
      }
      
      @Override
      public Builder clear() {
        result = new bites.vision.Vision.Frame();
        return this;
      }
      
      @Override
      public Builder clone() {
        return new Builder().mergeFrom(result);
      }
      
      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bites.vision.Vision.Frame.getDescriptor();
      }
      
      public bites.vision.Vision.Frame getDefaultInstanceForType() {
        return bites.vision.Vision.Frame.getDefaultInstance();
      }
      
      public bites.vision.Vision.Frame build() {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result);
        }
        return buildPartial();
      }
      
      private bites.vision.Vision.Frame buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw new com.google.protobuf.UninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bites.vision.Vision.Frame buildPartial() {
        if (result.balls_ != java.util.Collections.EMPTY_LIST) {
          result.balls_ =
            java.util.Collections.unmodifiableList(result.balls_);
        }
        if (result.objects_ != java.util.Collections.EMPTY_LIST) {
          result.objects_ =
            java.util.Collections.unmodifiableList(result.objects_);
        }
        if (result.lines_ != java.util.Collections.EMPTY_LIST) {
          result.lines_ =
            java.util.Collections.unmodifiableList(result.lines_);
        }
        if (result.corners_ != java.util.Collections.EMPTY_LIST) {
          result.corners_ =
            java.util.Collections.unmodifiableList(result.corners_);
        }
        if (result.robots_ != java.util.Collections.EMPTY_LIST) {
          result.robots_ =
            java.util.Collections.unmodifiableList(result.robots_);
        }
        bites.vision.Vision.Frame returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // optional .bites.vision.Image image = 1;
      public boolean hasImage() {
        return result.hasImage();
      }
      public bites.vision.Vision.Image getImage() {
        return result.getImage();
      }
      public Builder setImage(bites.vision.Vision.Image value) {
        result.hasImage = true;
        result.image_ = value;
        return this;
      }
      public Builder setImage(bites.vision.Vision.Image.Builder builderForValue) {
        result.hasImage = true;
        result.image_ = builderForValue.build();
        return this;
      }
      public Builder mergeImage(bites.vision.Vision.Image value) {
        if (result.hasImage() &&
            result.image_ != bites.vision.Vision.Image.getDefaultInstance()) {
          result.image_ =
            bites.vision.Vision.Image.newBuilder(result.image_).mergeFrom(value).buildPartial();
        } else {
          result.image_ = value;
        }
        result.hasImage = true;
        return this;
      }
      public Builder clearImage() {
        result.hasImage = false;
        result.image_ = bites.vision.Vision.Image.getDefaultInstance();
        return this;
      }
      
      // repeated .bites.vision.Ball balls = 2;
      public java.util.List<bites.vision.Vision.Ball> getBallsList() {
        return java.util.Collections.unmodifiableList(result.balls_);
      }
      public int getBallsCount() {
        return result.getBallsCount();
      }
      public bites.vision.Vision.Ball getBalls(int index) {
        return result.getBalls(index);
      }
      public Builder setBalls(int index, bites.vision.Vision.Ball value) {
        result.balls_.set(index, value);
        return this;
      }
      public Builder setBalls(int index, bites.vision.Vision.Ball.Builder builderForValue) {
        result.balls_.set(index, builderForValue.build());
        return this;
      }
      public Builder addBalls(bites.vision.Vision.Ball value) {
        if (result.balls_.isEmpty()) {
          result.balls_ = new java.util.ArrayList<bites.vision.Vision.Ball>();
        }
        result.balls_.add(value);
        return this;
      }
      public Builder addBalls(bites.vision.Vision.Ball.Builder builderForValue) {
        if (result.balls_.isEmpty()) {
          result.balls_ = new java.util.ArrayList<bites.vision.Vision.Ball>();
        }
        result.balls_.add(builderForValue.build());
        return this;
      }
      public Builder addAllBalls(
          java.lang.Iterable<? extends bites.vision.Vision.Ball> values) {
        if (result.balls_.isEmpty()) {
          result.balls_ = new java.util.ArrayList<bites.vision.Vision.Ball>();
        }
        super.addAll(values, result.balls_);
        return this;
      }
      public Builder clearBalls() {
        result.balls_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .bites.vision.FieldObject objects = 3;
      public java.util.List<bites.vision.Vision.FieldObject> getObjectsList() {
        return java.util.Collections.unmodifiableList(result.objects_);
      }
      public int getObjectsCount() {
        return result.getObjectsCount();
      }
      public bites.vision.Vision.FieldObject getObjects(int index) {
        return result.getObjects(index);
      }
      public Builder setObjects(int index, bites.vision.Vision.FieldObject value) {
        result.objects_.set(index, value);
        return this;
      }
      public Builder setObjects(int index, bites.vision.Vision.FieldObject.Builder builderForValue) {
        result.objects_.set(index, builderForValue.build());
        return this;
      }
      public Builder addObjects(bites.vision.Vision.FieldObject value) {
        if (result.objects_.isEmpty()) {
          result.objects_ = new java.util.ArrayList<bites.vision.Vision.FieldObject>();
        }
        result.objects_.add(value);
        return this;
      }
      public Builder addObjects(bites.vision.Vision.FieldObject.Builder builderForValue) {
        if (result.objects_.isEmpty()) {
          result.objects_ = new java.util.ArrayList<bites.vision.Vision.FieldObject>();
        }
        result.objects_.add(builderForValue.build());
        return this;
      }
      public Builder addAllObjects(
          java.lang.Iterable<? extends bites.vision.Vision.FieldObject> values) {
        if (result.objects_.isEmpty()) {
          result.objects_ = new java.util.ArrayList<bites.vision.Vision.FieldObject>();
        }
        super.addAll(values, result.objects_);
        return this;
      }
      public Builder clearObjects() {
        result.objects_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .bites.vision.Line lines = 4;
      public java.util.List<bites.vision.Vision.Line> getLinesList() {
        return java.util.Collections.unmodifiableList(result.lines_);
      }
      public int getLinesCount() {
        return result.getLinesCount();
      }
      public bites.vision.Vision.Line getLines(int index) {
        return result.getLines(index);
      }
      public Builder setLines(int index, bites.vision.Vision.Line value) {
        result.lines_.set(index, value);
        return this;
      }
      public Builder setLines(int index, bites.vision.Vision.Line.Builder builderForValue) {
        result.lines_.set(index, builderForValue.build());
        return this;
      }
      public Builder addLines(bites.vision.Vision.Line value) {
        if (result.lines_.isEmpty()) {
          result.lines_ = new java.util.ArrayList<bites.vision.Vision.Line>();
        }
        result.lines_.add(value);
        return this;
      }
      public Builder addLines(bites.vision.Vision.Line.Builder builderForValue) {
        if (result.lines_.isEmpty()) {
          result.lines_ = new java.util.ArrayList<bites.vision.Vision.Line>();
        }
        result.lines_.add(builderForValue.build());
        return this;
      }
      public Builder addAllLines(
          java.lang.Iterable<? extends bites.vision.Vision.Line> values) {
        if (result.lines_.isEmpty()) {
          result.lines_ = new java.util.ArrayList<bites.vision.Vision.Line>();
        }
        super.addAll(values, result.lines_);
        return this;
      }
      public Builder clearLines() {
        result.lines_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .bites.vision.Corner corners = 5;
      public java.util.List<bites.vision.Vision.Corner> getCornersList() {
        return java.util.Collections.unmodifiableList(result.corners_);
      }
      public int getCornersCount() {
        return result.getCornersCount();
      }
      public bites.vision.Vision.Corner getCorners(int index) {
        return result.getCorners(index);
      }
      public Builder setCorners(int index, bites.vision.Vision.Corner value) {
        result.corners_.set(index, value);
        return this;
      }
      public Builder setCorners(int index, bites.vision.Vision.Corner.Builder builderForValue) {
        result.corners_.set(index, builderForValue.build());
        return this;
      }
      public Builder addCorners(bites.vision.Vision.Corner value) {
        if (result.corners_.isEmpty()) {
          result.corners_ = new java.util.ArrayList<bites.vision.Vision.Corner>();
        }
        result.corners_.add(value);
        return this;
      }
      public Builder addCorners(bites.vision.Vision.Corner.Builder builderForValue) {
        if (result.corners_.isEmpty()) {
          result.corners_ = new java.util.ArrayList<bites.vision.Vision.Corner>();
        }
        result.corners_.add(builderForValue.build());
        return this;
      }
      public Builder addAllCorners(
          java.lang.Iterable<? extends bites.vision.Vision.Corner> values) {
        if (result.corners_.isEmpty()) {
          result.corners_ = new java.util.ArrayList<bites.vision.Vision.Corner>();
        }
        super.addAll(values, result.corners_);
        return this;
      }
      public Builder clearCorners() {
        result.corners_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .bites.vision.Robot robots = 6;
      public java.util.List<bites.vision.Vision.Robot> getRobotsList() {
        return java.util.Collections.unmodifiableList(result.robots_);
      }
      public int getRobotsCount() {
        return result.getRobotsCount();
      }
      public bites.vision.Vision.Robot getRobots(int index) {
        return result.getRobots(index);
      }
      public Builder setRobots(int index, bites.vision.Vision.Robot value) {
        result.robots_.set(index, value);
        return this;
      }
      public Builder setRobots(int index, bites.vision.Vision.Robot.Builder builderForValue) {
        result.robots_.set(index, builderForValue.build());
        return this;
      }
      public Builder addRobots(bites.vision.Vision.Robot value) {
        if (result.robots_.isEmpty()) {
          result.robots_ = new java.util.ArrayList<bites.vision.Vision.Robot>();
        }
        result.robots_.add(value);
        return this;
      }
      public Builder addRobots(bites.vision.Vision.Robot.Builder builderForValue) {
        if (result.robots_.isEmpty()) {
          result.robots_ = new java.util.ArrayList<bites.vision.Vision.Robot>();
        }
        result.robots_.add(builderForValue.build());
        return this;
      }
      public Builder addAllRobots(
          java.lang.Iterable<? extends bites.vision.Vision.Robot> values) {
        if (result.robots_.isEmpty()) {
          result.robots_ = new java.util.ArrayList<bites.vision.Vision.Robot>();
        }
        super.addAll(values, result.robots_);
        return this;
      }
      public Builder clearRobots() {
        result.robots_ = java.util.Collections.emptyList();
        return this;
      }
    }
    
    static {
      bites.vision.Vision.getDescriptor();
    }
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_Image_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_Image_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_Landmark_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_Landmark_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_DistanceBearing_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_DistanceBearing_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_Detection_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_Detection_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_Line_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_Line_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_Line_LinePoint_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_Line_LinePoint_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_Corner_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_Corner_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_Cross_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_Cross_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_CrossBar_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_CrossBar_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_FieldObject_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_FieldObject_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_Robot_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_Robot_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_Ball_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_Ball_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bites_vision_Frame_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bites_vision_Frame_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String descriptorData =
      "\n\014vision.proto\022\014bites.vision\032\rstructs.pr" +
      "oto\"\241\001\n\005Image\0226\n\010encoding\030\001 \002(\0162\034.bites." +
      "vision.Image.Encoding:\006YUV422\022\r\n\005width\030\002" +
      " \002(\005\022\016\n\006height\030\003 \002(\005\022\014\n\004data\030\004 \002(\014\"3\n\010En" +
      "coding\022\t\n\005YCbCr\020\001\022\n\n\006YUV422\020\002\022\007\n\003RGB\020\003\022\007" +
      "\n\003BMP\020\004\"\240\016\n\010Landmark\022%\n\002id\030\001 \002(\0162\031.bites" +
      ".vision.Landmark.ID\022\017\n\007field_x\030\002 \002(\002\022\017\n\007" +
      "field_y\030\003 \002(\002\0228\n\014id_certainty\030\004 \001(\0162\".bi" +
      "tes.vision.Landmark.IDCertainty\022D\n\022dista" +
      "nce_certainty\030\005 \001(\0162(.bites.vision.Landm" +
      "ark.DistanceCertainty\"\262\013\n\002ID\022\022\n\016L_INNER_" +
      "CORNER\020\000\022\022\n\016L_OUTER_CORNER\020\001\022\014\n\010T_CORNER" +
      "\020\002\022\021\n\rCENTER_CIRCLE\020\003\022\017\n\013BLUE_GOAL_T\020\004\022\021" +
      "\n\rYELLOW_GOAL_T\020\005\022+\n\'BLUE_GOAL_RIGHT_L_O" +
      "R_YELLOW_GOAL_LEFT_L\020\006\022+\n\'BLUE_GOAL_LEFT" +
      "_L_OR_YELLOW_GOAL_RIGHT_L\020\007\022/\n+BLUE_CORN" +
      "ER_TOP_L_OR_YELLOW_CORNER_BOTTOM_L\020\010\022/\n+" +
      "BLUE_CORNER_BOTTOM_L_OR_YELLOW_CORNER_TO" +
      "P_L\020\t\022\022\n\016CORNER_INNER_L\020\n\022\024\n\020GOAL_BOX_IN" +
      "NER_L\020\013\022\025\n\021BLUE_GOAL_OUTER_L\020\014\022\027\n\023YELLOW" +
      "_GOAL_OUTER_L\020\r\022\014\n\010CENTER_T\020\016\022\025\n\021BLUE_CO" +
      "RNER_TOP_L\020\017\022\030\n\024BLUE_CORNER_BOTTOM_L\020\020\022\024" +
      "\n\020BLUE_GOAL_LEFT_T\020\021\022\025\n\021BLUE_GOAL_RIGHT_" +
      "T\020\022\022\024\n\020BLUE_GOAL_LEFT_L\020\023\022\025\n\021BLUE_GOAL_R" +
      "IGHT_L\020\024\022\023\n\017CENTER_BOTTOM_T\020\025\022\020\n\014CENTER_" +
      "TOP_T\020\026\022\032\n\026YELLOW_CORNER_BOTTOM_L\020\027\022\027\n\023Y" +
      "ELLOW_CORNER_TOP_L\020\030\022\026\n\022YELLOW_GOAL_LEFT" +
      "_T\020\031\022\027\n\023YELLOW_GOAL_RIGHT_T\020\032\022\026\n\022YELLOW_" +
      "GOAL_LEFT_L\020\033\022\027\n\023YELLOW_GOAL_RIGHT_L\020\034\022\025" +
      "\n\021CORNER_NO_IDEA_ID\020\035\022\n\n\006TOP_CC\020\036\022\r\n\tBOT" +
      "TOM_CC\020\037\022\027\n\023BLUE_GOAL_LEFT_POST\020(\022\030\n\024BLU" +
      "E_GOAL_RIGHT_POST\020)\022\031\n\025YELLOW_GOAL_LEFT_" +
      "POST\020*\022\032\n\026YELLOW_GOAL_RIGHT_POST\020+\022\022\n\016BL" +
      "UE_GOAL_POST\020,\022\024\n\020YELLOW_GOAL_POST\020-\022\030\n\024" +
      "UNKNOWN_FIELD_OBJECT\020.\022\020\n\014UNKNOWN_LINE\0202" +
      "\022\023\n\017SIDE_OR_ENDLINE\0203\022\021\n\rSIDELINE_LINE\0204" +
      "\022\020\n\014ENDLINE_LINE\0205\022\020\n\014GOALBOX_LINE\0206\022\025\n\021" +
      "GOALBOX_SIDE_LINE\0207\022\024\n\020GOALBOX_TOP_LINE\020" +
      "8\022\025\n\021BLUE_GOAL_ENDLINE\0209\022\027\n\023YELLOW_GOAL_" +
      "ENDLINE\020:\022\030\n\024BLUE_YELLOW_SIDELINE\020;\022\030\n\024Y" +
      "ELLOW_BLUE_SIDELINE\020<\022\025\n\021CENTER_FIELD_LI" +
      "NE\020=\022\031\n\025BLUE_GOALBOX_TOP_LINE\020>\022\032\n\026BLUE_" +
      "GOALBOX_LEFT_LINE\020?\022\033\n\027BLUE_GOALBOX_RIGH" +
      "T_LINE\020@\022\033\n\027YELLOW_GOALBOX_TOP_LINE\020A\022\034\n" +
      "\030YELLOW_GOALBOX_LEFT_LINE\020A\022\035\n\031YELLOW_GO" +
      "ALBOX_RIGHT_LINE\020B\022\023\n\017BLUE_GOAL_CROSS\020P\022" +
      "\025\n\021YELLOW_GOAL_CROSS\020Q\022\022\n\016ABSTRACT_CROSS" +
      "\020R\"6\n\013IDCertainty\022\014\n\010NOT_SURE\020\000\022\016\n\nMILDY" +
      "_SURE\020\001\022\t\n\005_SURE\020\002\"X\n\021DistanceCertainty\022" +
      "\017\n\013BOTH_UNSURE\020\000\022\020\n\014WIDTH_UNSURE\020\001\022\021\n\rHE" +
      "IGHT_UNSURE\020\002\022\r\n\tBOTH_SURE\020\003*\004\010\n\020e\"]\n\017Di" +
      "stanceBearing\022\020\n\010distance\030\001 \002(\002\022\017\n\007beari" +
      "ng\030\002 \002(\002\022\023\n\013distance_sd\030\003 \002(\002\022\022\n\nbearing" +
      "_sd\030\004 \002(\002\"\335\001\n\tDetection\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030" +
      "\002 \002(\005\022\r\n\005width\030\003 \002(\002\022\016\n\006height\030\004 \002(\002\022\020\n\010" +
      "center_x\030\005 \002(\005\022\020\n\010center_y\030\006 \002(\005\022\017\n\007angl" +
      "e_x\030\007 \002(\002\022\017\n\007angle_y\030\010 \002(\002\022\020\n\010foc_dist\030\t" +
      " \002(\002\022\021\n\televation\030\n \002(\002\022)\n\002db\030\013 \002(\0132\035.bi" +
      "tes.vision.DistanceBearing*\005\010\024\020\311\001\"\242\006\n\004Li" +
      "ne\022$\n\004self\030\001 \002(\0132\026.bites.vision.Landmark" +
      "\022)\n\tpossibles\030\002 \003(\0132\026.bites.vision.Landm" +
      "ark\022,\n\006points\030\003 \003(\0132\034.bites.vision.Line." +
      "LinePoint\022\r\n\005angle\030\004 \001(\002\022\t\n\001a\030\005 \001(\002\022\t\n\001b" +
      "\030\006 \001(\002\022\016\n\006length\030\007 \001(\002\022\032\n\022avg_vertical_w" +
      "idth\030\010 \001(\002\022\034\n\024avg_horizontal_width\030\t \001(\002" +
      "\0228\n\022thinnest_hor_point\030\n \001(\0132\034.bites.vis" +
      "ion.Line.LinePoint\0228\n\022thickest_hor_point" +
      "\030\013 \001(\0132\034.bites.vision.Line.LinePoint\0229\n\023" +
      "thinnest_vert_point\030\014 \001(\0132\034.bites.vision" +
      ".Line.LinePoint\0229\n\023thickest_vert_point\030\r" +
      " \001(\0132\034.bites.vision.Line.LinePoint\022)\n\002db" +
      "\030\016 \002(\0132\035.bites.vision.DistanceBearing\022\017\n" +
      "\007cc_line\030\017 \002(\010\032\202\001\n\tLinePoint\022\t\n\001x\030\001 \002(\005\022" +
      "\t\n\001y\030\002 \002(\005\022\022\n\nline_width\030\003 \002(\002\022\020\n\010distan" +
      "ce\030\004 \002(\002\0229\n\017found_with_scan\030\005 \002(\0162 .bite" +
      "s.vision.Line.ScanDirection\"-\n\rScanDirec" +
      "tion\022\016\n\nHORIZONTAL\020\000\022\014\n\010VERTICAL\020\0012(\n\010fi" +
      "eld_x2\022\026.bites.vision.Landmark\030\n \001(\0022(\n\010" +
      "field_y2\022\026.bites.vision.Landmark\030\013 \001(\002\"\310" +
      "\003\n\006Corner\022$\n\004self\030\001 \002(\0132\026.bites.vision.L" +
      "andmark\022\'\n\006detect\030\002 \002(\0132\027.bites.vision.D" +
      "etection\022)\n\tpossibles\030\003 \003(\0132\026.bites.visi" +
      "on.Landmark\022!\n\005lines\030\004 \003(\0132\022.bites.visio" +
      "n.Line\022\r\n\005dists\030\005 \003(\002\022#\n\007t_lines\030\006 \003(\0132\022" +
      ".bites.vision.Line\022\033\n\023angle_between_line" +
      "s\030\007 \002(\002\"A\n\005Shape\022\013\n\007INNER_L\020\000\022\013\n\007OUTER_L" +
      "\020\001\022\005\n\001T\020\002\022\n\n\006CIRCLE\020\003\022\013\n\007UNKNOWN\020\0042G\n\013co" +
      "rner_type\022\026.bites.vision.Landmark\030\014 \001(\0162" +
      "\032.bites.vision.Corner.Shape2D\n\014corner_li" +
      "nes\022\026.bites.vision.Landmark\030\r \003(\0132\026.bite" +
      "s.vision.Landmark\"\243\001\n\005Cross\022$\n\004self\030\001 \002(" +
      "\0132\026.bites.vision.Landmark\022\'\n\006detect\030\002 \002(" +
      "\0132\027.bites.vision.Detection\022)\n\tpossibles\030" +
      "\003 \003(\0132\026.bites.vision.Landmark\022 \n\006bounds\030" +
      "\004 \002(\0132\020.bites.Rectangle\"U\n\010CrossBar\022\'\n\006d" +
      "etect\030\001 \002(\0132\027.bites.vision.Detection\022 \n\006" +
      "bounds\030\002 \002(\0132\020.bites.Rectangle\"\200\001\n\013Field" +
      "Object\022$\n\004self\030\001 \002(\0132\026.bites.vision.Land" +
      "mark\022)\n\tpossibles\030\002 \002(\0132\026.bites.vision.L" +
      "andmark\022 \n\006bounds\030\003 \002(\0132\020.bites.Rectangl" +
      "e\"\213\001\n\005Robot\022\'\n\006detect\030\001 \002(\0132\027.bites.visi" +
      "on.Detection\022 \n\006bounds\030\002 \002(\0132\020.bites.Rec" +
      "tangle\022\021\n\tback_left\030\003 \002(\005\022\022\n\nback_right\030" +
      "\004 \002(\005\022\020\n\010back_dir\030\005 \002(\005\"S\n\004Ball\022\'\n\006detec" +
      "t\030\001 \002(\0132\027.bites.vision.Detection\022\016\n\006radi" +
      "us\030\002 \002(\002\022\022\n\nconfidence\030\003 \002(\005\"\351\001\n\005Frame\022\"" +
      "\n\005image\030\001 \001(\0132\023.bites.vision.Image\022!\n\005ba" +
      "lls\030\002 \003(\0132\022.bites.vision.Ball\022*\n\007objects" +
      "\030\003 \003(\0132\031.bites.vision.FieldObject\022!\n\005lin" +
      "es\030\004 \003(\0132\022.bites.vision.Line\022%\n\007corners\030" +
      "\005 \003(\0132\024.bites.vision.Corner\022#\n\006robots\030\006 " +
      "\003(\0132\023.bites.vision.Robot";
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_bites_vision_Image_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_bites_vision_Image_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_Image_descriptor,
              new java.lang.String[] { "Encoding", "Width", "Height", "Data", },
              bites.vision.Vision.Image.class,
              bites.vision.Vision.Image.Builder.class);
          internal_static_bites_vision_Landmark_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_bites_vision_Landmark_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_Landmark_descriptor,
              new java.lang.String[] { "Id", "FieldX", "FieldY", "IdCertainty", "DistanceCertainty", },
              bites.vision.Vision.Landmark.class,
              bites.vision.Vision.Landmark.Builder.class);
          internal_static_bites_vision_DistanceBearing_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_bites_vision_DistanceBearing_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_DistanceBearing_descriptor,
              new java.lang.String[] { "Distance", "Bearing", "DistanceSd", "BearingSd", },
              bites.vision.Vision.DistanceBearing.class,
              bites.vision.Vision.DistanceBearing.Builder.class);
          internal_static_bites_vision_Detection_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_bites_vision_Detection_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_Detection_descriptor,
              new java.lang.String[] { "X", "Y", "Width", "Height", "CenterX", "CenterY", "AngleX", "AngleY", "FocDist", "Elevation", "Db", },
              bites.vision.Vision.Detection.class,
              bites.vision.Vision.Detection.Builder.class);
          internal_static_bites_vision_Line_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_bites_vision_Line_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_Line_descriptor,
              new java.lang.String[] { "Self", "Possibles", "Points", "Angle", "A", "B", "Length", "AvgVerticalWidth", "AvgHorizontalWidth", "ThinnestHorPoint", "ThickestHorPoint", "ThinnestVertPoint", "ThickestVertPoint", "Db", "CcLine", },
              bites.vision.Vision.Line.class,
              bites.vision.Vision.Line.Builder.class);
          internal_static_bites_vision_Line_LinePoint_descriptor =
            internal_static_bites_vision_Line_descriptor.getNestedTypes().get(0);
          internal_static_bites_vision_Line_LinePoint_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_Line_LinePoint_descriptor,
              new java.lang.String[] { "X", "Y", "LineWidth", "Distance", "FoundWithScan", },
              bites.vision.Vision.Line.LinePoint.class,
              bites.vision.Vision.Line.LinePoint.Builder.class);
          bites.vision.Vision.Line.fieldX2 =
            com.google.protobuf.GeneratedMessage.newGeneratedExtension(
              bites.vision.Vision.Line.getDescriptor().getExtensions().get(0),
              java.lang.Float.class);
          bites.vision.Vision.Line.fieldY2 =
            com.google.protobuf.GeneratedMessage.newGeneratedExtension(
              bites.vision.Vision.Line.getDescriptor().getExtensions().get(1),
              java.lang.Float.class);
          internal_static_bites_vision_Corner_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_bites_vision_Corner_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_Corner_descriptor,
              new java.lang.String[] { "Self", "Detect", "Possibles", "Lines", "Dists", "TLines", "AngleBetweenLines", },
              bites.vision.Vision.Corner.class,
              bites.vision.Vision.Corner.Builder.class);
          bites.vision.Vision.Corner.cornerType =
            com.google.protobuf.GeneratedMessage.newGeneratedExtension(
              bites.vision.Vision.Corner.getDescriptor().getExtensions().get(0),
              bites.vision.Vision.Corner.Shape.class);
          bites.vision.Vision.Corner.cornerLines =
            com.google.protobuf.GeneratedMessage
              .newRepeatedGeneratedExtension(
                bites.vision.Vision.Corner.getDescriptor().getExtensions().get(1),
                bites.vision.Vision.Landmark.class);
          internal_static_bites_vision_Cross_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_bites_vision_Cross_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_Cross_descriptor,
              new java.lang.String[] { "Self", "Detect", "Possibles", "Bounds", },
              bites.vision.Vision.Cross.class,
              bites.vision.Vision.Cross.Builder.class);
          internal_static_bites_vision_CrossBar_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_bites_vision_CrossBar_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_CrossBar_descriptor,
              new java.lang.String[] { "Detect", "Bounds", },
              bites.vision.Vision.CrossBar.class,
              bites.vision.Vision.CrossBar.Builder.class);
          internal_static_bites_vision_FieldObject_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_bites_vision_FieldObject_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_FieldObject_descriptor,
              new java.lang.String[] { "Self", "Possibles", "Bounds", },
              bites.vision.Vision.FieldObject.class,
              bites.vision.Vision.FieldObject.Builder.class);
          internal_static_bites_vision_Robot_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_bites_vision_Robot_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_Robot_descriptor,
              new java.lang.String[] { "Detect", "Bounds", "BackLeft", "BackRight", "BackDir", },
              bites.vision.Vision.Robot.class,
              bites.vision.Vision.Robot.Builder.class);
          internal_static_bites_vision_Ball_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_bites_vision_Ball_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_Ball_descriptor,
              new java.lang.String[] { "Detect", "Radius", "Confidence", },
              bites.vision.Vision.Ball.class,
              bites.vision.Vision.Ball.Builder.class);
          internal_static_bites_vision_Frame_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_bites_vision_Frame_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bites_vision_Frame_descriptor,
              new java.lang.String[] { "Image", "Balls", "Objects", "Lines", "Corners", "Robots", },
              bites.vision.Vision.Frame.class,
              bites.vision.Vision.Frame.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          bites.Structs.getDescriptor(),
        }, assigner);
  }
}
