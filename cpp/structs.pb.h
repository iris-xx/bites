// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_structs_2eproto__INCLUDED
#define PROTOBUF_structs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace bites {

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_structs_2eproto();
void protobuf_BuildDesc_structs_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class Point;
class Rectangle;

// ===================================================================

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();
  
  Point(const Point& from);
  
  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();
  void Swap(Point* other);
  
  // implements Message ----------------------------------------------
  
  Point* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void protobuf_BuildDesc_structs_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Rectangle : public ::google::protobuf::Message {
 public:
  Rectangle();
  virtual ~Rectangle();
  
  Rectangle(const Rectangle& from);
  
  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rectangle& default_instance();
  void Swap(Rectangle* other);
  
  // implements Message ----------------------------------------------
  
  Rectangle* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bites.Point leftTop = 1;
  inline bool has_lefttop() const;
  inline void clear_lefttop();
  inline const ::bites::Point& lefttop() const;
  inline ::bites::Point* mutable_lefttop();
  
  // required .bites.Point rightTop = 2;
  inline bool has_righttop() const;
  inline void clear_righttop();
  inline const ::bites::Point& righttop() const;
  inline ::bites::Point* mutable_righttop();
  
  // required .bites.Point leftBottom = 3;
  inline bool has_leftbottom() const;
  inline void clear_leftbottom();
  inline const ::bites::Point& leftbottom() const;
  inline ::bites::Point* mutable_leftbottom();
  
  // required .bites.Point rightBottom = 4;
  inline bool has_rightbottom() const;
  inline void clear_rightbottom();
  inline const ::bites::Point& rightbottom() const;
  inline ::bites::Point* mutable_rightbottom();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::bites::Point* lefttop_;
  ::bites::Point* righttop_;
  ::bites::Point* leftbottom_;
  ::bites::Point* rightbottom_;
  friend void protobuf_BuildDesc_structs_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Rectangle* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Point

// required int32 x = 1;
inline bool Point::has_x() const {
  return _has_bit(0);
}
inline void Point::clear_x() {
  x_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Point::x() const {
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  _set_bit(0);
  x_ = value;
}

// required int32 y = 2;
inline bool Point::has_y() const {
  return _has_bit(1);
}
inline void Point::clear_y() {
  y_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Point::y() const {
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  _set_bit(1);
  y_ = value;
}

// -------------------------------------------------------------------

// Rectangle

// required .bites.Point leftTop = 1;
inline bool Rectangle::has_lefttop() const {
  return _has_bit(0);
}
inline void Rectangle::clear_lefttop() {
  if (lefttop_ != NULL) lefttop_->::bites::Point::Clear();
  _clear_bit(0);
}
inline const ::bites::Point& Rectangle::lefttop() const {
  return lefttop_ != NULL ? *lefttop_ : *default_instance_->lefttop_;
}
inline ::bites::Point* Rectangle::mutable_lefttop() {
  _set_bit(0);
  if (lefttop_ == NULL) lefttop_ = new ::bites::Point;
  return lefttop_;
}

// required .bites.Point rightTop = 2;
inline bool Rectangle::has_righttop() const {
  return _has_bit(1);
}
inline void Rectangle::clear_righttop() {
  if (righttop_ != NULL) righttop_->::bites::Point::Clear();
  _clear_bit(1);
}
inline const ::bites::Point& Rectangle::righttop() const {
  return righttop_ != NULL ? *righttop_ : *default_instance_->righttop_;
}
inline ::bites::Point* Rectangle::mutable_righttop() {
  _set_bit(1);
  if (righttop_ == NULL) righttop_ = new ::bites::Point;
  return righttop_;
}

// required .bites.Point leftBottom = 3;
inline bool Rectangle::has_leftbottom() const {
  return _has_bit(2);
}
inline void Rectangle::clear_leftbottom() {
  if (leftbottom_ != NULL) leftbottom_->::bites::Point::Clear();
  _clear_bit(2);
}
inline const ::bites::Point& Rectangle::leftbottom() const {
  return leftbottom_ != NULL ? *leftbottom_ : *default_instance_->leftbottom_;
}
inline ::bites::Point* Rectangle::mutable_leftbottom() {
  _set_bit(2);
  if (leftbottom_ == NULL) leftbottom_ = new ::bites::Point;
  return leftbottom_;
}

// required .bites.Point rightBottom = 4;
inline bool Rectangle::has_rightbottom() const {
  return _has_bit(3);
}
inline void Rectangle::clear_rightbottom() {
  if (rightbottom_ != NULL) rightbottom_->::bites::Point::Clear();
  _clear_bit(3);
}
inline const ::bites::Point& Rectangle::rightbottom() const {
  return rightbottom_ != NULL ? *rightbottom_ : *default_instance_->rightbottom_;
}
inline ::bites::Point* Rectangle::mutable_rightbottom() {
  _set_bit(3);
  if (rightbottom_ == NULL) rightbottom_ = new ::bites::Point;
  return rightbottom_;
}


}  // namespace bites
#endif  // PROTOBUF_structs_2eproto__INCLUDED
